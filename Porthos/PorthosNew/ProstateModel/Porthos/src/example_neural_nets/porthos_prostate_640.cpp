/*
This is an autogenerated file, generated using the EzPC compiler.
*/
//#ifdef TMP

#include "globals.h"

#include<vector>
#include<math.h>
#include<cstdlib>
#include<iostream>
#include<fstream>
#include "EzPCFunctionalities.h"

using namespace std;

void funcConv3DMPC(
	int32_t N,
	int32_t D,
	int32_t H,
	int32_t W, 
	int32_t CI,
	int32_t FD,
	int32_t FH,
	int32_t FW,
	int32_t CO, 
	int32_t zPadDLeft,
	int32_t zPadDRight,
	int32_t zPadHLeft, 
	int32_t zPadHRight,
	int32_t zPadWLeft,
	int32_t zPadWRight, 
	int32_t strideD,
	int32_t strideH,
	int32_t strideW, 
	vector< vector< vector< vector< vector<porthosSecretType> > > > >& inputArr, 
	vector< vector< vector< vector< vector<porthosSecretType> > > > >& filterArr,
	int32_t consSF,
	vector< vector< vector< vector< vector<porthosSecretType> > > > >& outArr);

uint32_t public_lrshift(uint32_t x, uint32_t y){
return (x >> y);
}

int32_t public_lrshift(int32_t x, uint32_t y){
return ((int32_t)(((uint32_t)x) >> y));
}

uint64_t public_lrshift(uint64_t x, uint64_t y){
return (x >> y);
}

int64_t public_lrshift(int64_t x, uint64_t y){
return ((int64_t)(((uint64_t)x) >> y));
}

template<typename T>
vector<T> make_vector(size_t size) {
return std::vector<T>(size);
}

template <typename T, typename... Args>
auto make_vector(size_t first, Args... sizes)
{
auto inner = make_vector<T>(sizes...);
return vector<decltype(inner)>(first, inner);
}

template<typename T>
ostream& operator<< (ostream &os, const vector<T> &v)
{
for(auto it = v.begin (); it != v.end (); ++it) {
os << *it << endl;
}
return os;
}


#include "ezpc.h"

extern int partyNum;
vector<uint64_t*> toFreeMemoryLaterArr;
int NUM_OF_PARTIES;

AESObject* aes_common;
AESObject* aes_indep;
AESObject* aes_a_1;
AESObject* aes_a_2;
AESObject* aes_b_1;
AESObject* aes_b_2;
AESObject* aes_c_1;
AESObject* aes_share_conv_bit_shares_p0_p2;
AESObject* aes_share_conv_bit_shares_p1_p2;
AESObject* aes_share_conv_shares_mod_odd_p0_p2;
AESObject* aes_share_conv_shares_mod_odd_p1_p2;
AESObject* aes_comp_msb_shares_lsb_p0_p2;
AESObject* aes_comp_msb_shares_lsb_p1_p2;
AESObject* aes_comp_msb_shares_bit_vec_p0_p2;
AESObject* aes_comp_msb_shares_bit_vec_p1_p2;
AESObject* aes_conv_opti_a_1;
AESObject* aes_conv_opti_a_2;
AESObject* aes_conv_opti_b_1;
AESObject* aes_conv_opti_b_2;
AESObject* aes_conv_opti_c_1;
ParallelAESObject* aes_parallel;























void MatAddBroadCast2(int32_t a1, int32_t a2, int32_t b1, int32_t s1, int32_t s2, auto& A, auto& B, auto& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i2];
}
}
}

void MatAdd2(int32_t a1, int32_t a2, int32_t b1, int32_t b2, int32_t s1, int32_t s2, auto& A, auto& B, auto& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
outArr[i1][i2] = A[aIdx1][aIdx2]+B[bIdx1][bIdx2];
}
}
}

void MatAddBroadCast4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, auto& A, auto& B, auto& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i4];
}
}
}
}
}

void MatAddBroadCast5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, auto& A, auto& B, auto& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i5];
}
}
}
}
}
}

void MatAdd4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t s1, int32_t s2, int32_t s3, int32_t s4, auto& A, auto& B, auto& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
outArr[i1][i2][i3][i4] = A[aIdx1][aIdx2][aIdx3][aIdx4]+B[bIdx1][bIdx2][bIdx3][bIdx4];
}
}
}
}
}

void MatAdd5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t b5, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, auto& A, auto& B, auto& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t aIdx5 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;

int32_t bIdx5 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
aIdx5 = (a5 ==  (int32_t)1) ?  (int32_t)0 : i5;
bIdx5 = (b5 ==  (int32_t)1) ?  (int32_t)0 : i5;
outArr[i1][i2][i3][i4][i5] = A[aIdx1][aIdx2][aIdx3][aIdx4][aIdx5]+B[bIdx1][bIdx2][bIdx3][bIdx4][bIdx5];
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int64_t val, auto& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
arr[i1] = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int64_t val, auto& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
arr[i1][i2] = val;
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int64_t val, auto& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
arr[i1][i2][i3][i4] = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int64_t val, auto& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
arr[i1][i2][i3][i4][i5] = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, auto& targetArr, auto& fromArr, auto& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
targetArr[i1] = fromArr[i1];
}
}

void CopyTensor2(int32_t s1, int32_t s2, auto& targetArr, auto& fromArr, auto& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
targetArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, auto& targetArr, auto& fromArr, auto& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateIdentity11(int32_t s1, auto& fromArr, auto& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
newArr[i1] = fromArr[i1];
}
}

void CreateIdentity22(int32_t s1, int32_t s2, auto& fromArr, auto& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
newArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, auto& fromArr, auto& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, auto& inArr, int32_t perDimSize, auto& beginIdx, auto& sizeIdx, auto& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)];
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, auto& inArr, int32_t perDimSize, auto& beginIdx, auto& sizeIdx, auto& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
outArr[i][j][k][l][m] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)][(beginIdx[ (int32_t)2] + k)][(beginIdx[ (int32_t)3] + l)][(beginIdx[ (int32_t)4] + m)];
}
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, auto& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, auto& inp2, int32_t axis, auto& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
}
}
}
}
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, auto& inp1, int32_t inp2s1, int32_t inp2s2, auto& inp2, int32_t axis, auto& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[(i1 - inp1s1)][i2];
}
} else {
if ((i2 < inp1s2)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[i1][(i2 - inp1s2)];
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, auto& inp, int32_t axis, int32_t curCount, int32_t total, auto& out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, auto& inputArr, auto& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][ci];
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DCSF(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

auto filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

auto inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

auto matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMulCSF2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, consSF);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, auto& inputArr, auto& outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][(co + startCO)];
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, auto& inputArr, auto& outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][(co + startCO)] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, auto& inputArr, auto& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][(ci + startCI)];
}
outputArr[((((fh * FW) * CIG) + (fw * CIG)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DCSFGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

auto inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

auto matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);

auto filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMulCSF2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, consSF);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][d][h][w][co] = inputArr[co][((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w)];
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, auto& inputArr, auto& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosD][curPosH][curPosW][ci];
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}


void Conv3DCSF(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){
funcConv3DMPC(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, inputArr, filterArr, consSF, outArr);
};

void my_Conv3DCSF(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

auto filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

auto inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

auto matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMulCSF2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, consSF);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
}

void Transpose2(int32_t s1, int32_t s2, auto& inArr, auto& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[j][i];
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, auto& inpArr, int32_t pads1, int32_t pads2, auto& paddings, auto& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, auto& inpArr, int32_t pads1, int32_t pads2, auto& paddings, auto& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);

int32_t lbounds5 = paddings[ (int32_t)4][ (int32_t)0];

int32_t rbounds5excl = (s5 - paddings[ (int32_t)4][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
outArr[i][j][k][l][m] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])][(m - paddings[ (int32_t)4][ (int32_t)0])];
} else {
outArr[i][j][k][l][m] = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, auto& inpArr, int32_t pads, auto& paddings, auto& outArr){

int32_t lbounds1 = paddings[ (int32_t)0];

int32_t rbounds1excl = (o1 - paddings[ (int32_t)4]);

int32_t lbounds2 = paddings[ (int32_t)1];

int32_t rbounds2excl = (o2 - paddings[ (int32_t)5]);

int32_t lbounds3 = paddings[ (int32_t)2];

int32_t rbounds3excl = (o3 - paddings[ (int32_t)6]);

int32_t lbounds4 = paddings[ (int32_t)3];

int32_t rbounds4excl = (o4 - paddings[ (int32_t)7]);
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0])][(j - paddings[ (int32_t)1])][(k - paddings[ (int32_t)2])][(l - paddings[ (int32_t)3])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, auto& inArr, auto& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
}
}
}
}
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, auto& inputArr, auto& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2DCSF(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

auto filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

auto inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

auto matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMulCSF2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, consSF);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, auto& inputArr, auto& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FD -  (int32_t)1) - fd)][((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, auto& inputArr, auto& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3DCSF(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, auto& inputArr, auto& filterArr, int32_t consSF, auto& outArr){
ConvTranspose3DCSFMPC(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, D, H, W, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, inputArr, filterArr, consSF, outArr);
}

void ClearMemPublic(int32_t x){
return ;
}

void ClearMemPublic1(int32_t s, auto& x){
return ;
}

void ClearMemPublic4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, auto& arr){
return ;
}

void ClearMemPublic5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, auto& arr){
return ;
}


extern int instanceID;
int main(int argc, char** argv)
{
parseInputs(argc, argv);
string whichNetwork = "Your Network";
show_porthos_mode();
string indep_key_location, common_key_location;
if(partyNum == PARTY_A){
indep_key_location = "files/keyA";
common_key_location = "files/keyAB";
}
else if(partyNum == PARTY_B){
indep_key_location = "files/keyB";
common_key_location = "files/keyAB";
}
else{
indep_key_location = "files/keyB";
common_key_location = "files/keyAB";
}
aes_indep = new AESObject(indep_key_location);
aes_common = new AESObject(common_key_location);
aes_a_1 = new AESObject("files/keyD");
aes_a_2 = new AESObject("files/keyD");
aes_b_1 = new AESObject("files/keyD");
aes_b_2 = new AESObject("files/keyD");
aes_c_1 = new AESObject("files/keyD");
aes_share_conv_bit_shares_p0_p2 = new AESObject("files/keyD");
aes_share_conv_bit_shares_p1_p2 = new AESObject("files/keyD");
aes_share_conv_shares_mod_odd_p0_p2 = new AESObject("files/keyD");
aes_share_conv_shares_mod_odd_p1_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_lsb_p0_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_lsb_p1_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_bit_vec_p0_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_bit_vec_p1_p2 = new AESObject("files/keyD");
aes_conv_opti_a_1 = new AESObject("files/keyD");
aes_conv_opti_a_2 = new AESObject("files/keyD");
aes_conv_opti_b_1 = new AESObject("files/keyD");
aes_conv_opti_b_2 = new AESObject("files/keyD");
aes_conv_opti_c_1 = new AESObject("files/keyD");
aes_parallel = new ParallelAESObject(common_key_location);

if (MPC)
{
initializeMPC();
initializeCommunication(argv[2], partyNum);
synchronize(2000000); 
}

if (PARALLEL) aes_parallel->precompute();

e_role role = partyNum;


auto tmp0 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp0 at (1123,1-1123,50) */
uint64_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == CLIENT)) {
cin >> __tmp_in_tmp0;
}
tmp0[i0][i1][i2][i3][i4] = (role == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}
}

auto tmp1 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp1 at (1126,1-1126,46) */
uint64_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp1;
}
tmp1[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp1 : 0;
}
}
}
}
}

auto tmp2 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp2 at (1129,1-1129,47) */
uint64_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp2;
}
tmp2[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp2 : 0;
}
}
}
}
}

auto tmp3 = make_vector<uint64_t>( (int32_t)8);
/* Variable to read the clear value corresponding to the input variable tmp3 at (1132,1-1132,33) */
uint64_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)8; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp3;
}
tmp3[i0] = (role == SERVER) ? __tmp_in_tmp3 : 0;
}

auto tmp4 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp4 at (1135,1-1135,47) */
uint64_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp4;
}
tmp4[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp4 : 0;
}
}
}
}
}

auto tmp5 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp5 at (1138,1-1138,46) */
uint64_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp5;
}
tmp5[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp5 : 0;
}
}
}
}
}

auto tmp6 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp6 at (1141,1-1141,47) */
uint64_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)512; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp6;
}
tmp6[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp6 : 0;
}
}
}
}
}

auto tmp7 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp7 at (1144,1-1144,47) */
uint64_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp7;
}
tmp7[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp7 : 0;
}
}
}
}
}

auto tmp8 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp8 at (1147,1-1147,46) */
uint64_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp8;
}
tmp8[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp8 : 0;
}
}
}
}
}

auto tmp9 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp9 at (1150,1-1150,47) */
uint64_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp9;
}
tmp9[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp9 : 0;
}
}
}
}
}

auto tmp10 = make_vector<uint64_t>( (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp10 at (1153,1-1153,35) */
uint64_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp10;
}
tmp10[i0] = (role == SERVER) ? __tmp_in_tmp10 : 0;
}

auto tmp11 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp11 at (1156,1-1156,50) */
uint64_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp11;
}
tmp11[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp11 : 0;
}
}
}
}
}

auto tmp12 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp12 at (1159,1-1159,47) */
uint64_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp12;
}
tmp12[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp12 : 0;
}
}
}
}
}

auto tmp13 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp13 at (1162,1-1162,50) */
uint64_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp13;
}
tmp13[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp13 : 0;
}
}
}
}
}

auto tmp14 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp14 at (1165,1-1165,47) */
uint64_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp14;
}
tmp14[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp14 : 0;
}
}
}
}
}

auto tmp15 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp15 at (1168,1-1168,48) */
uint64_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp15;
}
tmp15[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}
}

auto tmp16 = make_vector<uint64_t>( (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp16 at (1171,1-1171,34) */
uint64_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)5; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp16;
}
tmp16[i0] = (role == SERVER) ? __tmp_in_tmp16 : 0;
}

auto tmp17 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp17 at (1174,1-1174,50) */
uint64_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp17;
}
tmp17[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp17 : 0;
}
}
}
}
}

auto tmp18 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp18 at (1177,1-1177,48) */
uint64_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)32; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp18;
}
tmp18[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp18 : 0;
}
}
}
}
}

auto tmp19 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp19 at (1180,1-1180,36) */
uint64_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp19;
}
tmp19[i0] = (role == SERVER) ? __tmp_in_tmp19 : 0;
}

auto tmp20 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp20 at (1183,1-1183,48) */
uint64_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp20;
}
tmp20[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp20 : 0;
}
}
}
}
}

auto tmp21 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp21 at (1186,1-1186,48) */
uint64_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp21;
}
tmp21[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp21 : 0;
}
}
}
}
}

auto tmp22 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp22 at (1189,1-1189,48) */
uint64_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp22;
}
tmp22[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp22 : 0;
}
}
}
}
}

auto tmp23 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp23 at (1192,1-1192,47) */
uint64_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp23;
}
tmp23[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp23 : 0;
}
}
}
}
}

auto tmp24 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp24 at (1195,1-1195,47) */
uint64_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp24;
}
tmp24[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp24 : 0;
}
}
}
}
}

auto tmp25 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp25 at (1198,1-1198,48) */
uint64_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp25;
}
tmp25[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}
}

auto tmp26 = make_vector<uint64_t>( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)256,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp26 at (1201,1-1201,50) */
uint64_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)4; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)4; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)4; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)512; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp26;
}
tmp26[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp26 : 0;
}
}
}
}
}

auto tmp27 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp27 at (1204,1-1204,47) */
uint64_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)32; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp27;
}
tmp27[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp27 : 0;
}
}
}
}
}

auto tmp28 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp28 at (1207,1-1207,48) */
uint64_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)512; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp28;
}
tmp28[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp28 : 0;
}
}
}
}
}

auto tmp29 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp29 at (1210,1-1210,47) */
uint64_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp29;
}
tmp29[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp29 : 0;
}
}
}
}
}

auto tmp30 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp30 at (1213,1-1213,47) */
uint64_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp30;
}
tmp30[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp30 : 0;
}
}
}
}
}

auto tmp31 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp31 at (1216,1-1216,48) */
uint64_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)32; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp31;
}
tmp31[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp31 : 0;
}
}
}
}
}

auto tmp32 = make_vector<uint64_t>( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)64,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp32 at (1219,1-1219,49) */
uint64_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)4; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)4; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)4; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp32;
}
tmp32[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp32 : 0;
}
}
}
}
}

auto tmp33 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp33 at (1222,1-1222,48) */
uint64_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp33;
}
tmp33[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp33 : 0;
}
}
}
}
}

auto tmp34 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp34 at (1225,1-1225,50) */
uint64_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp34;
}
tmp34[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp34 : 0;
}
}
}
}
}

auto tmp35 = make_vector<uint64_t>( (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp35 at (1228,1-1228,34) */
uint64_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)5; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp35;
}
tmp35[i0] = (role == SERVER) ? __tmp_in_tmp35 : 0;
}

auto tmp36 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp36 at (1231,1-1231,47) */
uint64_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp36;
}
tmp36[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp36 : 0;
}
}
}
}
}

auto tmp37 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp37 at (1234,1-1234,48) */
uint64_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp37;
}
tmp37[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp37 : 0;
}
}
}
}
}

auto tmp38 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp38 at (1237,1-1237,50) */
uint64_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp38;
}
tmp38[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp38 : 0;
}
}
}
}
}

auto tmp39 = make_vector<uint64_t>( (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp39 at (1240,1-1240,34) */
uint64_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)5; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp39;
}
tmp39[i0] = (role == SERVER) ? __tmp_in_tmp39 : 0;
}

auto tmp40 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp40 at (1243,1-1243,48) */
uint64_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)512; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp40;
}
tmp40[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp40 : 0;
}
}
}
}
}

auto tmp41 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp41 at (1246,1-1246,48) */
uint64_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp41;
}
tmp41[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp41 : 0;
}
}
}
}
}

auto tmp42 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp42 at (1249,1-1249,47) */
uint64_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp42;
}
tmp42[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp42 : 0;
}
}
}
}
}

auto tmp43 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp43 at (1252,1-1252,47) */
uint64_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp43;
}
tmp43[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp43 : 0;
}
}
}
}
}

auto tmp44 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp44 at (1255,1-1255,50) */
uint64_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp44;
}
tmp44[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp44 : 0;
}
}
}
}
}

auto tmp45 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp45 at (1258,1-1258,48) */
uint64_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp45;
}
tmp45[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}
}

auto tmp46 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp46 at (1261,1-1261,48) */
uint64_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp46;
}
tmp46[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp46 : 0;
}
}
}
}
}

auto tmp47 = make_vector<uint64_t>( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)32,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp47 at (1264,1-1264,48) */
uint64_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)4; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)4; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)4; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp47;
}
tmp47[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp47 : 0;
}
}
}
}
}

auto tmp48 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp48 at (1267,1-1267,50) */
uint64_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp48;
}
tmp48[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp48 : 0;
}
}
}
}
}

auto tmp49 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp49 at (1270,1-1270,50) */
uint64_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp49;
}
tmp49[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp49 : 0;
}
}
}
}
}

auto tmp50 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp50 at (1273,1-1273,50) */
uint64_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp50;
}
tmp50[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp50 : 0;
}
}
}
}
}

auto tmp51 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp51 at (1276,1-1276,36) */
uint64_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp51;
}
tmp51[i0] = (role == SERVER) ? __tmp_in_tmp51 : 0;
}

auto tmp52 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp52 at (1279,1-1279,49) */
uint64_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)128; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp52;
}
tmp52[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp52 : 0;
}
}
}
}
}

auto tmp53 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp53 at (1282,1-1282,48) */
uint64_t __tmp_in_tmp53;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp53;
}
tmp53[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp53 : 0;
}
}
}
}
}

auto tmp54 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp54 at (1285,1-1285,48) */
uint64_t __tmp_in_tmp54;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp54;
}
tmp54[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp54 : 0;
}
}
}
}
}

auto tmp55 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp55 at (1288,1-1288,47) */
uint64_t __tmp_in_tmp55;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp55;
}
tmp55[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp55 : 0;
}
}
}
}
}

auto tmp56 = make_vector<uint64_t>( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)128,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp56 at (1291,1-1291,50) */
uint64_t __tmp_in_tmp56;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)4; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)4; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)4; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp56;
}
tmp56[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp56 : 0;
}
}
}
}
}

auto tmp57 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp57 at (1294,1-1294,47) */
uint64_t __tmp_in_tmp57;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp57;
}
tmp57[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp57 : 0;
}
}
}
}
}

auto tmp58 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp58 at (1297,1-1297,47) */
uint64_t __tmp_in_tmp58;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp58;
}
tmp58[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp58 : 0;
}
}
}
}
}

auto tmp59 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp59 at (1300,1-1300,47) */
uint64_t __tmp_in_tmp59;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp59;
}
tmp59[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp59 : 0;
}
}
}
}
}

auto tmp60 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp60 at (1303,1-1303,48) */
uint64_t __tmp_in_tmp60;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp60;
}
tmp60[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp60 : 0;
}
}
}
}
}

auto tmp61 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp61 at (1306,1-1306,48) */
uint64_t __tmp_in_tmp61;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp61;
}
tmp61[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp61 : 0;
}
}
}
}
}

auto tmp62 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)8);
/* Variable to read the clear value corresponding to the input variable tmp62 at (1309,1-1309,47) */
uint64_t __tmp_in_tmp62;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)8; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp62;
}
tmp62[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp62 : 0;
}
}
}
}
}

auto tmp63 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp63 at (1312,1-1312,48) */
uint64_t __tmp_in_tmp63;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp63;
}
tmp63[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp63 : 0;
}
}
}
}
}

auto tmp64 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp64 at (1315,1-1315,48) */
uint64_t __tmp_in_tmp64;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)32; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp64;
}
tmp64[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp64 : 0;
}
}
}
}
}

auto tmp65 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp65 at (1318,1-1318,48) */
uint64_t __tmp_in_tmp65;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp65;
}
tmp65[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp65 : 0;
}
}
}
}
}

auto tmp66 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp66 at (1321,1-1321,48) */
uint64_t __tmp_in_tmp66;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp66;
}
tmp66[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp66 : 0;
}
}
}
}
}

auto tmp67 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp67 at (1324,1-1324,48) */
uint64_t __tmp_in_tmp67;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)64; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp67;
}
tmp67[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp67 : 0;
}
}
}
}
}

auto tmp68 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp68 at (1327,1-1327,35) */
uint64_t __tmp_in_tmp68;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp68;
}
tmp68[i0] = (role == SERVER) ? __tmp_in_tmp68 : 0;
}

auto tmp69 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp69 at (1330,1-1330,47) */
uint64_t __tmp_in_tmp69;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp69;
}
tmp69[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp69 : 0;
}
}
}
}
}

auto tmp70 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp70 at (1333,1-1333,48) */
uint64_t __tmp_in_tmp70;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)32; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp70;
}
tmp70[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp70 : 0;
}
}
}
}
}

auto tmp71 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp71 at (1336,1-1336,47) */
uint64_t __tmp_in_tmp71;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp71;
}
tmp71[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp71 : 0;
}
}
}
}
}

auto tmp72 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp72 at (1339,1-1339,48) */
uint64_t __tmp_in_tmp72;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)128; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp72;
}
tmp72[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp72 : 0;
}
}
}
}
}

auto tmp73 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp73 at (1342,1-1342,50) */
uint64_t __tmp_in_tmp73;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)512; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp73;
}
tmp73[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp73 : 0;
}
}
}
}
}

auto tmp74 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp74 at (1345,1-1345,48) */
uint64_t __tmp_in_tmp74;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp74;
}
tmp74[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp74 : 0;
}
}
}
}
}

auto tmp75 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp75 at (1348,1-1348,47) */
uint64_t __tmp_in_tmp75;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp75;
}
tmp75[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp75 : 0;
}
}
}
}
}

auto tmp76 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp76 at (1351,1-1351,48) */
uint64_t __tmp_in_tmp76;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)256; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp76;
}
tmp76[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp76 : 0;
}
}
}
}
}

auto tmp77 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp77 at (1354,1-1354,50) */
uint64_t __tmp_in_tmp77;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)512; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp77;
}
tmp77[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp77 : 0;
}
}
}
}
}

auto tmp78 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp78 at (1357,1-1357,48) */
uint64_t __tmp_in_tmp78;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)512; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp78;
}
tmp78[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp78 : 0;
}
}
}
}
}

auto tmp79 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp79 at (1360,1-1360,47) */
uint64_t __tmp_in_tmp79;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)64; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)1; i4++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp79;
}
tmp79[i0][i1][i2][i3][i4] = (role == SERVER) ? __tmp_in_tmp79 : 0;
}
}
}
}
}

auto tmp80 = make_vector<uint64_t>( (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp80 at (1363,1-1363,34) */
uint64_t __tmp_in_tmp80;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)5; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp80;
}
tmp80[i0] = (role == SERVER) ? __tmp_in_tmp80 : 0;
}
StartComputation();

auto tmp81 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp81[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp81[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp81[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp81[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp81[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp81[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp81[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp81[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp81[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp81[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp82 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp0,  (int32_t)5,  (int32_t)2, tmp81, tmp82);
ClearMemSecret5( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp0);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp81);

auto tmp85 = make_vector<int32_t>( (int32_t)5);
tmp85[ (int64_t)0] =  (int32_t)0;
tmp85[ (int64_t)1] =  (int32_t)2;
tmp85[ (int64_t)2] =  (int32_t)3;
tmp85[ (int64_t)3] =  (int32_t)4;
tmp85[ (int64_t)4] =  (int32_t)1;

auto tmp86 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1);

int64_t i4;

int64_t i3;

int64_t i2;

int64_t i1;

int64_t i0;
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)66; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)258; i3++){
for (uint32_t i4 =  (int32_t)0; i4 <  (int32_t)258; i4++){
tmp86[i0][i2][i3][i4][i1] = tmp82[i0][i1][i2][i3][i4];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp82);

auto tmp88 = make_vector<int32_t>( (int32_t)5);
tmp88[ (int64_t)0] =  (int32_t)0;
tmp88[ (int64_t)1] =  (int32_t)4;
tmp88[ (int64_t)2] =  (int32_t)1;
tmp88[ (int64_t)3] =  (int32_t)2;
tmp88[ (int64_t)4] =  (int32_t)3;

auto tmp89 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp89[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp89[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp89[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp89[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp89[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp89[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp89[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp89[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp89[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp89[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp90 = make_vector<int32_t>( (int32_t)5);
tmp90[ (int64_t)0] =  (int32_t)0;
tmp90[ (int64_t)1] =  (int32_t)2;
tmp90[ (int64_t)2] =  (int32_t)3;
tmp90[ (int64_t)3] =  (int32_t)4;
tmp90[ (int64_t)4] =  (int32_t)1;

auto tmp91 = make_vector<int32_t>( (int32_t)5);
tmp91[ (int64_t)0] =  (int32_t)0;
tmp91[ (int64_t)1] =  (int32_t)4;
tmp91[ (int64_t)2] =  (int32_t)1;
tmp91[ (int64_t)3] =  (int32_t)2;
tmp91[ (int64_t)4] =  (int32_t)3;

auto tmp92 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp92[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp92[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp92[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp92[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp92[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp92[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp92[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp92[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp92[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp92[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp93 = make_vector<int32_t>( (int32_t)5);
tmp93[ (int64_t)0] =  (int32_t)0;
tmp93[ (int64_t)1] =  (int32_t)2;
tmp93[ (int64_t)2] =  (int32_t)3;
tmp93[ (int64_t)3] =  (int32_t)4;
tmp93[ (int64_t)4] =  (int32_t)1;

auto tmp94 = make_vector<int32_t>( (int32_t)5);
tmp94[ (int64_t)0] =  (int32_t)0;
tmp94[ (int64_t)1] =  (int32_t)4;
tmp94[ (int64_t)2] =  (int32_t)1;
tmp94[ (int64_t)3] =  (int32_t)2;
tmp94[ (int64_t)4] =  (int32_t)3;

auto tmp95 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp95[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp95[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp95[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp95[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp95[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp95[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp95[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp95[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp95[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp95[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp96 = make_vector<int32_t>( (int32_t)5);
tmp96[ (int64_t)0] =  (int32_t)0;
tmp96[ (int64_t)1] =  (int32_t)2;
tmp96[ (int64_t)2] =  (int32_t)3;
tmp96[ (int64_t)3] =  (int32_t)4;
tmp96[ (int64_t)4] =  (int32_t)1;

auto tmp97 = make_vector<int32_t>( (int32_t)5);
tmp97[ (int64_t)0] =  (int32_t)0;
tmp97[ (int64_t)1] =  (int32_t)4;
tmp97[ (int64_t)2] =  (int32_t)1;
tmp97[ (int64_t)3] =  (int32_t)2;
tmp97[ (int64_t)4] =  (int32_t)3;

auto tmp98 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp98[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp98[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp98[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp98[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp98[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp98[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp98[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp98[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp98[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp98[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp99 = make_vector<int32_t>( (int32_t)5);
tmp99[ (int64_t)0] =  (int32_t)0;
tmp99[ (int64_t)1] =  (int32_t)2;
tmp99[ (int64_t)2] =  (int32_t)3;
tmp99[ (int64_t)3] =  (int32_t)4;
tmp99[ (int64_t)4] =  (int32_t)1;

auto tmp100 = make_vector<int32_t>( (int32_t)5);
tmp100[ (int64_t)0] =  (int32_t)0;
tmp100[ (int64_t)1] =  (int32_t)4;
tmp100[ (int64_t)2] =  (int32_t)1;
tmp100[ (int64_t)3] =  (int32_t)2;
tmp100[ (int64_t)4] =  (int32_t)3;

auto tmp101 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp101[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp101[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp101[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp101[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp101[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp101[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp101[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp101[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp101[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp101[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp102 = make_vector<int32_t>( (int32_t)5);
tmp102[ (int64_t)0] =  (int32_t)0;
tmp102[ (int64_t)1] =  (int32_t)2;
tmp102[ (int64_t)2] =  (int32_t)3;
tmp102[ (int64_t)3] =  (int32_t)4;
tmp102[ (int64_t)4] =  (int32_t)1;

auto tmp103 = make_vector<int32_t>( (int32_t)5);
tmp103[ (int64_t)0] =  (int32_t)0;
tmp103[ (int64_t)1] =  (int32_t)4;
tmp103[ (int64_t)2] =  (int32_t)1;
tmp103[ (int64_t)3] =  (int32_t)2;
tmp103[ (int64_t)4] =  (int32_t)3;

auto tmp104 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp104[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp104[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp104[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp104[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp104[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp104[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp104[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp104[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp104[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp104[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp105 = make_vector<int32_t>( (int32_t)5);
tmp105[ (int64_t)0] =  (int32_t)0;
tmp105[ (int64_t)1] =  (int32_t)2;
tmp105[ (int64_t)2] =  (int32_t)3;
tmp105[ (int64_t)3] =  (int32_t)4;
tmp105[ (int64_t)4] =  (int32_t)1;

auto tmp106 = make_vector<int32_t>( (int32_t)5);
tmp106[ (int64_t)0] =  (int32_t)0;
tmp106[ (int64_t)1] =  (int32_t)4;
tmp106[ (int64_t)2] =  (int32_t)1;
tmp106[ (int64_t)3] =  (int32_t)2;
tmp106[ (int64_t)4] =  (int32_t)3;

auto tmp107 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp107[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp107[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp107[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp107[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp107[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp107[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp107[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp107[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp107[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp107[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp108 = make_vector<int32_t>( (int32_t)5);
tmp108[ (int64_t)0] =  (int32_t)0;
tmp108[ (int64_t)1] =  (int32_t)2;
tmp108[ (int64_t)2] =  (int32_t)3;
tmp108[ (int64_t)3] =  (int32_t)4;
tmp108[ (int64_t)4] =  (int32_t)1;

auto tmp109 = make_vector<int32_t>( (int32_t)5);
tmp109[ (int64_t)0] =  (int32_t)0;
tmp109[ (int64_t)1] =  (int32_t)4;
tmp109[ (int64_t)2] =  (int32_t)1;
tmp109[ (int64_t)3] =  (int32_t)2;
tmp109[ (int64_t)4] =  (int32_t)3;

auto tmp110 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp110[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp110[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp110[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp110[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp110[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp110[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp110[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp110[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp110[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp110[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp111 = make_vector<int32_t>( (int32_t)5);
tmp111[ (int64_t)0] =  (int32_t)0;
tmp111[ (int64_t)1] =  (int32_t)2;
tmp111[ (int64_t)2] =  (int32_t)3;
tmp111[ (int64_t)3] =  (int32_t)4;
tmp111[ (int64_t)4] =  (int32_t)1;

auto tmp112 = make_vector<int32_t>( (int32_t)5);
tmp112[ (int64_t)0] =  (int32_t)0;
tmp112[ (int64_t)1] =  (int32_t)4;
tmp112[ (int64_t)2] =  (int32_t)1;
tmp112[ (int64_t)3] =  (int32_t)2;
tmp112[ (int64_t)4] =  (int32_t)3;

auto tmp113 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp113[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp113[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp113[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp113[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp113[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp113[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp113[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp113[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp113[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp113[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp114 = make_vector<int32_t>( (int32_t)5);
tmp114[ (int64_t)0] =  (int32_t)0;
tmp114[ (int64_t)1] =  (int32_t)2;
tmp114[ (int64_t)2] =  (int32_t)3;
tmp114[ (int64_t)3] =  (int32_t)4;
tmp114[ (int64_t)4] =  (int32_t)1;

auto tmp115 = make_vector<int32_t>( (int32_t)5);
tmp115[ (int64_t)0] =  (int32_t)0;
tmp115[ (int64_t)1] =  (int32_t)4;
tmp115[ (int64_t)2] =  (int32_t)1;
tmp115[ (int64_t)3] =  (int32_t)2;
tmp115[ (int64_t)4] =  (int32_t)3;

auto tmp116 = make_vector<int32_t>( (int32_t)5);
tmp116[ (int64_t)0] =  (int32_t)0;
tmp116[ (int64_t)1] =  (int32_t)2;
tmp116[ (int64_t)2] =  (int32_t)3;
tmp116[ (int64_t)3] =  (int32_t)4;
tmp116[ (int64_t)4] =  (int32_t)1;

auto tmp117 = make_vector<int32_t>( (int32_t)5);
tmp117[ (int64_t)0] =  (int32_t)0;
tmp117[ (int64_t)1] =  (int32_t)1;
tmp117[ (int64_t)2] =  (int32_t)1;
tmp117[ (int64_t)3] =  (int32_t)1;
tmp117[ (int64_t)4] =  (int32_t)0;

auto tmp118 = make_vector<int32_t>( (int32_t)5);
tmp118[ (int64_t)0] =  (int32_t)1;
tmp118[ (int64_t)1] =  (int32_t)8;
tmp118[ (int64_t)2] =  (int32_t)0;
tmp118[ (int64_t)3] =  (int32_t)0;
tmp118[ (int64_t)4] =  (int32_t)0;

auto tmp119 = make_vector<int32_t>( (int32_t)5);
tmp119[ (int64_t)0] =  (int32_t)0;
tmp119[ (int64_t)1] =  (int32_t)4;
tmp119[ (int64_t)2] =  (int32_t)1;
tmp119[ (int64_t)3] =  (int32_t)2;
tmp119[ (int64_t)4] =  (int32_t)3;

auto tmp120 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp120[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp120[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp120[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp120[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp120[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp120[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp120[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp120[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp120[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp120[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp121 = make_vector<int32_t>( (int32_t)5);
tmp121[ (int64_t)0] =  (int32_t)0;
tmp121[ (int64_t)1] =  (int32_t)2;
tmp121[ (int64_t)2] =  (int32_t)3;
tmp121[ (int64_t)3] =  (int32_t)4;
tmp121[ (int64_t)4] =  (int32_t)1;

auto tmp122 = make_vector<int32_t>( (int32_t)5);
tmp122[ (int64_t)0] =  (int32_t)0;
tmp122[ (int64_t)1] =  (int32_t)4;
tmp122[ (int64_t)2] =  (int32_t)1;
tmp122[ (int64_t)3] =  (int32_t)2;
tmp122[ (int64_t)4] =  (int32_t)3;

auto tmp123 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp123[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp123[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp123[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp123[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp123[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp123[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp123[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp123[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp123[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp123[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp124 = make_vector<int32_t>( (int32_t)5);
tmp124[ (int64_t)0] =  (int32_t)0;
tmp124[ (int64_t)1] =  (int32_t)2;
tmp124[ (int64_t)2] =  (int32_t)3;
tmp124[ (int64_t)3] =  (int32_t)4;
tmp124[ (int64_t)4] =  (int32_t)1;

auto tmp125 = make_vector<int32_t>( (int32_t)5);
tmp125[ (int64_t)0] =  (int32_t)0;
tmp125[ (int64_t)1] =  (int32_t)4;
tmp125[ (int64_t)2] =  (int32_t)1;
tmp125[ (int64_t)3] =  (int32_t)2;
tmp125[ (int64_t)4] =  (int32_t)3;

auto tmp126 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp126[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp126[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp126[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp126[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp126[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp126[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp126[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp126[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp126[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp126[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp127 = make_vector<int32_t>( (int32_t)5);
tmp127[ (int64_t)0] =  (int32_t)0;
tmp127[ (int64_t)1] =  (int32_t)2;
tmp127[ (int64_t)2] =  (int32_t)3;
tmp127[ (int64_t)3] =  (int32_t)4;
tmp127[ (int64_t)4] =  (int32_t)1;

auto tmp128 = make_vector<int32_t>( (int32_t)5);
tmp128[ (int64_t)0] =  (int32_t)0;
tmp128[ (int64_t)1] =  (int32_t)4;
tmp128[ (int64_t)2] =  (int32_t)1;
tmp128[ (int64_t)3] =  (int32_t)2;
tmp128[ (int64_t)4] =  (int32_t)3;

auto tmp129 = make_vector<int32_t>( (int32_t)5);
tmp129[ (int64_t)0] =  (int32_t)0;
tmp129[ (int64_t)1] =  (int32_t)2;
tmp129[ (int64_t)2] =  (int32_t)3;
tmp129[ (int64_t)3] =  (int32_t)4;
tmp129[ (int64_t)4] =  (int32_t)1;

auto tmp130 = make_vector<int32_t>( (int32_t)5);
tmp130[ (int64_t)0] =  (int32_t)0;
tmp130[ (int64_t)1] =  (int32_t)1;
tmp130[ (int64_t)2] =  (int32_t)1;
tmp130[ (int64_t)3] =  (int32_t)1;
tmp130[ (int64_t)4] =  (int32_t)0;

auto tmp131 = make_vector<int32_t>( (int32_t)5);
tmp131[ (int64_t)0] =  (int32_t)1;
tmp131[ (int64_t)1] =  (int32_t)16;
tmp131[ (int64_t)2] =  (int32_t)64;
tmp131[ (int64_t)3] =  (int32_t)64;
tmp131[ (int64_t)4] =  (int32_t)128;

auto tmp132 = make_vector<int32_t>( (int32_t)5);
tmp132[ (int64_t)0] =  (int32_t)0;
tmp132[ (int64_t)1] =  (int32_t)4;
tmp132[ (int64_t)2] =  (int32_t)1;
tmp132[ (int64_t)3] =  (int32_t)2;
tmp132[ (int64_t)4] =  (int32_t)3;

auto tmp133 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp133[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp133[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp133[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp133[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp133[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp133[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp133[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp133[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp133[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp133[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp134 = make_vector<int32_t>( (int32_t)5);
tmp134[ (int64_t)0] =  (int32_t)0;
tmp134[ (int64_t)1] =  (int32_t)2;
tmp134[ (int64_t)2] =  (int32_t)3;
tmp134[ (int64_t)3] =  (int32_t)4;
tmp134[ (int64_t)4] =  (int32_t)1;

auto tmp135 = make_vector<int32_t>( (int32_t)5);
tmp135[ (int64_t)0] =  (int32_t)0;
tmp135[ (int64_t)1] =  (int32_t)4;
tmp135[ (int64_t)2] =  (int32_t)1;
tmp135[ (int64_t)3] =  (int32_t)2;
tmp135[ (int64_t)4] =  (int32_t)3;

auto tmp136 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp136[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp136[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp136[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp136[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp136[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp136[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp136[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp136[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp136[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp136[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp137 = make_vector<int32_t>( (int32_t)5);
tmp137[ (int64_t)0] =  (int32_t)0;
tmp137[ (int64_t)1] =  (int32_t)2;
tmp137[ (int64_t)2] =  (int32_t)3;
tmp137[ (int64_t)3] =  (int32_t)4;
tmp137[ (int64_t)4] =  (int32_t)1;

auto tmp138 = make_vector<int32_t>( (int32_t)5);
tmp138[ (int64_t)0] =  (int32_t)0;
tmp138[ (int64_t)1] =  (int32_t)4;
tmp138[ (int64_t)2] =  (int32_t)1;
tmp138[ (int64_t)3] =  (int32_t)2;
tmp138[ (int64_t)4] =  (int32_t)3;

auto tmp139 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp139[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp139[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp139[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp139[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp139[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp139[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp139[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp139[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp139[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp139[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp140 = make_vector<int32_t>( (int32_t)5);
tmp140[ (int64_t)0] =  (int32_t)0;
tmp140[ (int64_t)1] =  (int32_t)2;
tmp140[ (int64_t)2] =  (int32_t)3;
tmp140[ (int64_t)3] =  (int32_t)4;
tmp140[ (int64_t)4] =  (int32_t)1;

auto tmp141 = make_vector<int32_t>( (int32_t)5);
tmp141[ (int64_t)0] =  (int32_t)0;
tmp141[ (int64_t)1] =  (int32_t)4;
tmp141[ (int64_t)2] =  (int32_t)1;
tmp141[ (int64_t)3] =  (int32_t)2;
tmp141[ (int64_t)4] =  (int32_t)3;

auto tmp142 = make_vector<int32_t>( (int32_t)5);
tmp142[ (int64_t)0] =  (int32_t)0;
tmp142[ (int64_t)1] =  (int32_t)2;
tmp142[ (int64_t)2] =  (int32_t)3;
tmp142[ (int64_t)3] =  (int32_t)4;
tmp142[ (int64_t)4] =  (int32_t)1;

auto tmp143 = make_vector<int32_t>( (int32_t)5);
tmp143[ (int64_t)0] =  (int32_t)0;
tmp143[ (int64_t)1] =  (int32_t)1;
tmp143[ (int64_t)2] =  (int32_t)1;
tmp143[ (int64_t)3] =  (int32_t)1;
tmp143[ (int64_t)4] =  (int32_t)0;

auto tmp144 = make_vector<int32_t>( (int32_t)5);
tmp144[ (int64_t)0] =  (int32_t)1;
tmp144[ (int64_t)1] =  (int32_t)0;
tmp144[ (int64_t)2] =  (int32_t)0;
tmp144[ (int64_t)3] =  (int32_t)0;
tmp144[ (int64_t)4] =  (int32_t)0;

auto tmp145 = make_vector<int32_t>( (int32_t)5);
tmp145[ (int64_t)0] =  (int32_t)0;
tmp145[ (int64_t)1] =  (int32_t)4;
tmp145[ (int64_t)2] =  (int32_t)1;
tmp145[ (int64_t)3] =  (int32_t)2;
tmp145[ (int64_t)4] =  (int32_t)3;

auto tmp146 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp146[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp146[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp146[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp146[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp146[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp146[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp146[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp146[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp146[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp146[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp147 = make_vector<int32_t>( (int32_t)5);
tmp147[ (int64_t)0] =  (int32_t)0;
tmp147[ (int64_t)1] =  (int32_t)2;
tmp147[ (int64_t)2] =  (int32_t)3;
tmp147[ (int64_t)3] =  (int32_t)4;
tmp147[ (int64_t)4] =  (int32_t)1;

auto tmp148 = make_vector<int32_t>( (int32_t)5);
tmp148[ (int64_t)0] =  (int32_t)0;
tmp148[ (int64_t)1] =  (int32_t)4;
tmp148[ (int64_t)2] =  (int32_t)1;
tmp148[ (int64_t)3] =  (int32_t)2;
tmp148[ (int64_t)4] =  (int32_t)3;

auto tmp149 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp149[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp149[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp149[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp149[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp149[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp149[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp149[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp149[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp149[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp149[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp150 = make_vector<int32_t>( (int32_t)5);
tmp150[ (int64_t)0] =  (int32_t)0;
tmp150[ (int64_t)1] =  (int32_t)2;
tmp150[ (int64_t)2] =  (int32_t)3;
tmp150[ (int64_t)3] =  (int32_t)4;
tmp150[ (int64_t)4] =  (int32_t)1;

auto tmp151 = make_vector<int32_t>( (int32_t)5);
tmp151[ (int64_t)0] =  (int32_t)0;
tmp151[ (int64_t)1] =  (int32_t)4;
tmp151[ (int64_t)2] =  (int32_t)1;
tmp151[ (int64_t)3] =  (int32_t)2;
tmp151[ (int64_t)4] =  (int32_t)3;

auto tmp152 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp152[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp152[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp152[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp152[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp152[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp152[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp152[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp152[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp152[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp152[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp153 = make_vector<int32_t>( (int32_t)5);
tmp153[ (int64_t)0] =  (int32_t)0;
tmp153[ (int64_t)1] =  (int32_t)2;
tmp153[ (int64_t)2] =  (int32_t)3;
tmp153[ (int64_t)3] =  (int32_t)4;
tmp153[ (int64_t)4] =  (int32_t)1;

auto tmp154 = make_vector<int32_t>( (int32_t)5);
tmp154[ (int64_t)0] =  (int32_t)0;
tmp154[ (int64_t)1] =  (int32_t)4;
tmp154[ (int64_t)2] =  (int32_t)1;
tmp154[ (int64_t)3] =  (int32_t)2;
tmp154[ (int64_t)4] =  (int32_t)3;

auto tmp155 = make_vector<int32_t>( (int32_t)5);
tmp155[ (int64_t)0] =  (int32_t)0;
tmp155[ (int64_t)1] =  (int32_t)2;
tmp155[ (int64_t)2] =  (int32_t)3;
tmp155[ (int64_t)3] =  (int32_t)4;
tmp155[ (int64_t)4] =  (int32_t)1;

auto tmp156 = make_vector<int32_t>( (int32_t)5);
tmp156[ (int64_t)0] =  (int32_t)0;
tmp156[ (int64_t)1] =  (int32_t)1;
tmp156[ (int64_t)2] =  (int32_t)1;
tmp156[ (int64_t)3] =  (int32_t)1;
tmp156[ (int64_t)4] =  (int32_t)0;

auto tmp157 = make_vector<int32_t>( (int32_t)5);
tmp157[ (int64_t)0] =  (int32_t)1;
tmp157[ (int64_t)1] =  (int32_t)64;
tmp157[ (int64_t)2] =  (int32_t)256;
tmp157[ (int64_t)3] =  (int32_t)256;
tmp157[ (int64_t)4] =  (int32_t)0;

auto tmp158 = make_vector<int32_t>( (int32_t)5);
tmp158[ (int64_t)0] =  (int32_t)0;
tmp158[ (int64_t)1] =  (int32_t)4;
tmp158[ (int64_t)2] =  (int32_t)1;
tmp158[ (int64_t)3] =  (int32_t)2;
tmp158[ (int64_t)4] =  (int32_t)3;

auto tmp159 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp159[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp159[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp159[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp159[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp159[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp159[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp159[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp159[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp159[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp159[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp160 = make_vector<int32_t>( (int32_t)5);
tmp160[ (int64_t)0] =  (int32_t)0;
tmp160[ (int64_t)1] =  (int32_t)2;
tmp160[ (int64_t)2] =  (int32_t)3;
tmp160[ (int64_t)3] =  (int32_t)4;
tmp160[ (int64_t)4] =  (int32_t)1;

auto tmp161 = make_vector<int32_t>( (int32_t)5);
tmp161[ (int64_t)0] =  (int32_t)0;
tmp161[ (int64_t)1] =  (int32_t)4;
tmp161[ (int64_t)2] =  (int32_t)1;
tmp161[ (int64_t)3] =  (int32_t)2;
tmp161[ (int64_t)4] =  (int32_t)3;

auto tmp162 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp162[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp162[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp162[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp162[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp162[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp162[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp162[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp162[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp162[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp162[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp163 = make_vector<int32_t>( (int32_t)5);
tmp163[ (int64_t)0] =  (int32_t)0;
tmp163[ (int64_t)1] =  (int32_t)2;
tmp163[ (int64_t)2] =  (int32_t)3;
tmp163[ (int64_t)3] =  (int32_t)4;
tmp163[ (int64_t)4] =  (int32_t)1;

auto tmp164 = make_vector<int32_t>( (int32_t)5);
tmp164[ (int64_t)0] =  (int32_t)0;
tmp164[ (int64_t)1] =  (int32_t)4;
tmp164[ (int64_t)2] =  (int32_t)1;
tmp164[ (int64_t)3] =  (int32_t)2;
tmp164[ (int64_t)4] =  (int32_t)3;

auto tmp165 = make_vector<int32_t>( (int32_t)5,  (int32_t)2);
tmp165[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp165[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp165[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp165[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp165[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp165[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp165[ (int64_t)3][ (int64_t)0] =  (int32_t)1;
tmp165[ (int64_t)3][ (int64_t)1] =  (int32_t)1;
tmp165[ (int64_t)4][ (int64_t)0] =  (int32_t)1;
tmp165[ (int64_t)4][ (int64_t)1] =  (int32_t)1;

auto tmp166 = make_vector<int32_t>( (int32_t)5);
tmp166[ (int64_t)0] =  (int32_t)0;
tmp166[ (int64_t)1] =  (int32_t)2;
tmp166[ (int64_t)2] =  (int32_t)3;
tmp166[ (int64_t)3] =  (int32_t)4;
tmp166[ (int64_t)4] =  (int32_t)1;

auto tmp167 = make_vector<int32_t>( (int32_t)5);
tmp167[ (int64_t)0] =  (int32_t)0;
tmp167[ (int64_t)1] =  (int32_t)4;
tmp167[ (int64_t)2] =  (int32_t)1;
tmp167[ (int64_t)3] =  (int32_t)2;
tmp167[ (int64_t)4] =  (int32_t)3;

auto tmp168 = make_vector<int32_t>( (int32_t)5);
tmp168[ (int64_t)0] =  (int32_t)0;
tmp168[ (int64_t)1] =  (int32_t)2;
tmp168[ (int64_t)2] =  (int32_t)3;
tmp168[ (int64_t)3] =  (int32_t)4;
tmp168[ (int64_t)4] =  (int32_t)1;

auto tmp169 = make_vector<int32_t>( (int32_t)5);
tmp169[ (int64_t)0] =  (int32_t)0;
tmp169[ (int64_t)1] =  (int32_t)4;
tmp169[ (int64_t)2] =  (int32_t)1;
tmp169[ (int64_t)3] =  (int32_t)2;
tmp169[ (int64_t)4] =  (int32_t)3;

auto tmp170 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp86, tmp27,  (int32_t)24, tmp170);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)32, tmp27);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1, tmp86);

auto tmp173 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i9;

int64_t i8;

int64_t i7;

int64_t i6;

int64_t i5;
for (uint32_t i5 =  (int32_t)0; i5 <  (int32_t)1; i5++){
for (uint32_t i6 =  (int32_t)0; i6 <  (int32_t)64; i6++){
for (uint32_t i7 =  (int32_t)0; i7 <  (int32_t)256; i7++){
for (uint32_t i8 =  (int32_t)0; i8 <  (int32_t)256; i8++){
for (uint32_t i9 =  (int32_t)0; i9 <  (int32_t)32; i9++){
tmp173[i5][i9][i6][i7][i8] = tmp170[i5][i6][i7][i8][i9];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp170);

auto tmp175 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
ElemWiseMul5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp173, tmp59, tmp175,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp59);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp173);

auto tmp178 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp175, tmp55, tmp178);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp175);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp55);

auto tmp181 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
Relu5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp178, tmp181);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp178);

auto tmp183 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp181,  (int32_t)5,  (int32_t)2, tmp89, tmp183);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp89);

auto tmp185 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);

int64_t i14;

int64_t i13;

int64_t i12;

int64_t i11;

int64_t i10;
for (uint32_t i10 =  (int32_t)0; i10 <  (int32_t)1; i10++){
for (uint32_t i11 =  (int32_t)0; i11 <  (int32_t)32; i11++){
for (uint32_t i12 =  (int32_t)0; i12 <  (int32_t)66; i12++){
for (uint32_t i13 =  (int32_t)0; i13 <  (int32_t)258; i13++){
for (uint32_t i14 =  (int32_t)0; i14 <  (int32_t)258; i14++){
tmp185[i10][i12][i13][i14][i11] = tmp183[i10][i11][i12][i13][i14];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp183);

auto tmp187 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp185, tmp31,  (int32_t)24, tmp187);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32, tmp31);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp185);

auto tmp190 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i19;

int64_t i18;

int64_t i17;

int64_t i16;

int64_t i15;
for (uint32_t i15 =  (int32_t)0; i15 <  (int32_t)1; i15++){
for (uint32_t i16 =  (int32_t)0; i16 <  (int32_t)64; i16++){
for (uint32_t i17 =  (int32_t)0; i17 <  (int32_t)256; i17++){
for (uint32_t i18 =  (int32_t)0; i18 <  (int32_t)256; i18++){
for (uint32_t i19 =  (int32_t)0; i19 <  (int32_t)32; i19++){
tmp190[i15][i19][i16][i17][i18] = tmp187[i15][i16][i17][i18][i19];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp187);

auto tmp192 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
ElemWiseMul5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp190, tmp42, tmp192,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp190);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp42);

auto tmp195 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp192, tmp1, tmp195);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp192);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1);

auto tmp198 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
Relu5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp195, tmp198);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp195);

auto tmp200 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp198, tmp181, tmp200);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp181);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp198);

auto tmp203 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp200,  (int32_t)5,  (int32_t)2, tmp92, tmp203);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp92);

auto tmp205 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp200,  (int32_t)5,  (int32_t)2, tmp162, tmp205);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp162);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp200);

auto tmp208 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);

int64_t i24;

int64_t i23;

int64_t i22;

int64_t i21;

int64_t i20;
for (uint32_t i20 =  (int32_t)0; i20 <  (int32_t)1; i20++){
for (uint32_t i21 =  (int32_t)0; i21 <  (int32_t)32; i21++){
for (uint32_t i22 =  (int32_t)0; i22 <  (int32_t)66; i22++){
for (uint32_t i23 =  (int32_t)0; i23 <  (int32_t)258; i23++){
for (uint32_t i24 =  (int32_t)0; i24 <  (int32_t)258; i24++){
tmp208[i20][i22][i23][i24][i21] = tmp203[i20][i21][i22][i23][i24];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp203);

auto tmp210 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);

int64_t i29;

int64_t i28;

int64_t i27;

int64_t i26;

int64_t i25;
for (uint32_t i25 =  (int32_t)0; i25 <  (int32_t)1; i25++){
for (uint32_t i26 =  (int32_t)0; i26 <  (int32_t)32; i26++){
for (uint32_t i27 =  (int32_t)0; i27 <  (int32_t)66; i27++){
for (uint32_t i28 =  (int32_t)0; i28 <  (int32_t)258; i28++){
for (uint32_t i29 =  (int32_t)0; i29 <  (int32_t)258; i29++){
tmp210[i25][i27][i28][i29][i26] = tmp205[i25][i26][i27][i28][i29];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp205);

auto tmp212 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp208, tmp22,  (int32_t)24, tmp212);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp208);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)64, tmp22);

auto tmp215 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i34;

int64_t i33;

int64_t i32;

int64_t i31;

int64_t i30;
for (uint32_t i30 =  (int32_t)0; i30 <  (int32_t)1; i30++){
for (uint32_t i31 =  (int32_t)0; i31 <  (int32_t)32; i31++){
for (uint32_t i32 =  (int32_t)0; i32 <  (int32_t)128; i32++){
for (uint32_t i33 =  (int32_t)0; i33 <  (int32_t)128; i33++){
for (uint32_t i34 =  (int32_t)0; i34 <  (int32_t)64; i34++){
tmp215[i30][i34][i31][i32][i33] = tmp212[i30][i31][i32][i33][i34];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp212);

auto tmp217 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
ElemWiseMul5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp215, tmp8, tmp217,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp8);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp215);

auto tmp220 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp217, tmp43, tmp220);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp217);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp43);

auto tmp223 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
Relu5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp220, tmp223);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp220);

auto tmp225 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130);
Pad552( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp223,  (int32_t)5,  (int32_t)2, tmp95, tmp225);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp95);

auto tmp227 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);

int64_t i39;

int64_t i38;

int64_t i37;

int64_t i36;

int64_t i35;
for (uint32_t i35 =  (int32_t)0; i35 <  (int32_t)1; i35++){
for (uint32_t i36 =  (int32_t)0; i36 <  (int32_t)64; i36++){
for (uint32_t i37 =  (int32_t)0; i37 <  (int32_t)34; i37++){
for (uint32_t i38 =  (int32_t)0; i38 <  (int32_t)130; i38++){
for (uint32_t i39 =  (int32_t)0; i39 <  (int32_t)130; i39++){
tmp227[i35][i37][i38][i39][i36] = tmp225[i35][i36][i37][i38][i39];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130, tmp225);

auto tmp229 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
Conv3DCSF( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp227, tmp21,  (int32_t)24, tmp229);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp21);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp227);

auto tmp232 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i44;

int64_t i43;

int64_t i42;

int64_t i41;

int64_t i40;
for (uint32_t i40 =  (int32_t)0; i40 <  (int32_t)1; i40++){
for (uint32_t i41 =  (int32_t)0; i41 <  (int32_t)32; i41++){
for (uint32_t i42 =  (int32_t)0; i42 <  (int32_t)128; i42++){
for (uint32_t i43 =  (int32_t)0; i43 <  (int32_t)128; i43++){
for (uint32_t i44 =  (int32_t)0; i44 <  (int32_t)64; i44++){
tmp232[i40][i44][i41][i42][i43] = tmp229[i40][i41][i42][i43][i44];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp229);

auto tmp234 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
ElemWiseMul5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp232, tmp23, tmp234,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp23);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp232);

auto tmp237 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp210, tmp70,  (int32_t)24, tmp237);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp210);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32, tmp70);

auto tmp240 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i49;

int64_t i48;

int64_t i47;

int64_t i46;

int64_t i45;
for (uint32_t i45 =  (int32_t)0; i45 <  (int32_t)1; i45++){
for (uint32_t i46 =  (int32_t)0; i46 <  (int32_t)64; i46++){
for (uint32_t i47 =  (int32_t)0; i47 <  (int32_t)256; i47++){
for (uint32_t i48 =  (int32_t)0; i48 <  (int32_t)256; i48++){
for (uint32_t i49 =  (int32_t)0; i49 <  (int32_t)32; i49++){
tmp240[i45][i49][i46][i47][i48] = tmp237[i45][i46][i47][i48][i49];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp237);

auto tmp242 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp234, tmp71, tmp242);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp71);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp234);

auto tmp245 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
Relu5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp242, tmp245);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp242);

auto tmp247 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp245, tmp223, tmp247);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp223);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp245);

auto tmp250 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130);
Pad552( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp247,  (int32_t)5,  (int32_t)2, tmp98, tmp250);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp98);

auto tmp252 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130);
Pad552( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp247,  (int32_t)5,  (int32_t)2, tmp149, tmp252);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp247);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp149);

auto tmp255 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);

int64_t i54;

int64_t i53;

int64_t i52;

int64_t i51;

int64_t i50;
for (uint32_t i50 =  (int32_t)0; i50 <  (int32_t)1; i50++){
for (uint32_t i51 =  (int32_t)0; i51 <  (int32_t)64; i51++){
for (uint32_t i52 =  (int32_t)0; i52 <  (int32_t)34; i52++){
for (uint32_t i53 =  (int32_t)0; i53 <  (int32_t)130; i53++){
for (uint32_t i54 =  (int32_t)0; i54 <  (int32_t)130; i54++){
tmp255[i50][i52][i53][i54][i51] = tmp250[i50][i51][i52][i53][i54];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130, tmp250);

auto tmp257 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);

int64_t i59;

int64_t i58;

int64_t i57;

int64_t i56;

int64_t i55;
for (uint32_t i55 =  (int32_t)0; i55 <  (int32_t)1; i55++){
for (uint32_t i56 =  (int32_t)0; i56 <  (int32_t)64; i56++){
for (uint32_t i57 =  (int32_t)0; i57 <  (int32_t)34; i57++){
for (uint32_t i58 =  (int32_t)0; i58 <  (int32_t)130; i58++){
for (uint32_t i59 =  (int32_t)0; i59 <  (int32_t)130; i59++){
tmp257[i55][i57][i58][i59][i56] = tmp252[i55][i56][i57][i58][i59];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130, tmp252);

auto tmp259 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
Conv3DCSF( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp255, tmp52,  (int32_t)24, tmp259);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp255);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)128, tmp52);

auto tmp262 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i64;

int64_t i63;

int64_t i62;

int64_t i61;

int64_t i60;
for (uint32_t i60 =  (int32_t)0; i60 <  (int32_t)1; i60++){
for (uint32_t i61 =  (int32_t)0; i61 <  (int32_t)16; i61++){
for (uint32_t i62 =  (int32_t)0; i62 <  (int32_t)64; i62++){
for (uint32_t i63 =  (int32_t)0; i63 <  (int32_t)64; i63++){
for (uint32_t i64 =  (int32_t)0; i64 <  (int32_t)128; i64++){
tmp262[i60][i64][i61][i62][i63] = tmp259[i60][i61][i62][i63][i64];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp259);

auto tmp264 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
ElemWiseMul5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp262, tmp60, tmp264,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp262);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp60);

auto tmp267 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp264, tmp20, tmp267);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp264);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp20);

auto tmp270 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
Relu5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp267, tmp270);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp267);

auto tmp272 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66);
Pad552( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp270,  (int32_t)5,  (int32_t)2, tmp101, tmp272);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp101);

auto tmp274 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);

int64_t i69;

int64_t i68;

int64_t i67;

int64_t i66;

int64_t i65;
for (uint32_t i65 =  (int32_t)0; i65 <  (int32_t)1; i65++){
for (uint32_t i66 =  (int32_t)0; i66 <  (int32_t)128; i66++){
for (uint32_t i67 =  (int32_t)0; i67 <  (int32_t)18; i67++){
for (uint32_t i68 =  (int32_t)0; i68 <  (int32_t)66; i68++){
for (uint32_t i69 =  (int32_t)0; i69 <  (int32_t)66; i69++){
tmp274[i65][i67][i68][i69][i66] = tmp272[i65][i66][i67][i68][i69];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66, tmp272);

auto tmp276 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
Conv3DCSF( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp274, tmp38,  (int32_t)24, tmp276);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp38);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp274);

auto tmp279 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i74;

int64_t i73;

int64_t i72;

int64_t i71;

int64_t i70;
for (uint32_t i70 =  (int32_t)0; i70 <  (int32_t)1; i70++){
for (uint32_t i71 =  (int32_t)0; i71 <  (int32_t)16; i71++){
for (uint32_t i72 =  (int32_t)0; i72 <  (int32_t)64; i72++){
for (uint32_t i73 =  (int32_t)0; i73 <  (int32_t)64; i73++){
for (uint32_t i74 =  (int32_t)0; i74 <  (int32_t)128; i74++){
tmp279[i70][i74][i71][i72][i73] = tmp276[i70][i71][i72][i73][i74];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp276);

auto tmp281 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
ElemWiseMul5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp279, tmp61, tmp281,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp61);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp279);

auto tmp284 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp281, tmp41, tmp284);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp41);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp281);

auto tmp287 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
Relu5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp284, tmp287);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp284);

auto tmp289 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp287, tmp270, tmp289);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp270);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp287);

auto tmp292 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66);
Pad552( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp289,  (int32_t)5,  (int32_t)2, tmp104, tmp292);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp104);

auto tmp294 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66);
Pad552( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp289,  (int32_t)5,  (int32_t)2, tmp136, tmp294);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp289);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp136);

auto tmp297 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);

int64_t i79;

int64_t i78;

int64_t i77;

int64_t i76;

int64_t i75;
for (uint32_t i75 =  (int32_t)0; i75 <  (int32_t)1; i75++){
for (uint32_t i76 =  (int32_t)0; i76 <  (int32_t)128; i76++){
for (uint32_t i77 =  (int32_t)0; i77 <  (int32_t)18; i77++){
for (uint32_t i78 =  (int32_t)0; i78 <  (int32_t)66; i78++){
for (uint32_t i79 =  (int32_t)0; i79 <  (int32_t)66; i79++){
tmp297[i75][i77][i78][i79][i76] = tmp292[i75][i76][i77][i78][i79];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66, tmp292);

auto tmp299 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);

int64_t i84;

int64_t i83;

int64_t i82;

int64_t i81;

int64_t i80;
for (uint32_t i80 =  (int32_t)0; i80 <  (int32_t)1; i80++){
for (uint32_t i81 =  (int32_t)0; i81 <  (int32_t)128; i81++){
for (uint32_t i82 =  (int32_t)0; i82 <  (int32_t)18; i82++){
for (uint32_t i83 =  (int32_t)0; i83 <  (int32_t)66; i83++){
for (uint32_t i84 =  (int32_t)0; i84 <  (int32_t)66; i84++){
tmp299[i80][i82][i83][i84][i81] = tmp294[i80][i81][i82][i83][i84];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66, tmp294);

auto tmp301 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
Conv3DCSF( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp297, tmp50,  (int32_t)24, tmp301);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)256, tmp50);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp297);

auto tmp304 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i89;

int64_t i88;

int64_t i87;

int64_t i86;

int64_t i85;
for (uint32_t i85 =  (int32_t)0; i85 <  (int32_t)1; i85++){
for (uint32_t i86 =  (int32_t)0; i86 <  (int32_t)8; i86++){
for (uint32_t i87 =  (int32_t)0; i87 <  (int32_t)32; i87++){
for (uint32_t i88 =  (int32_t)0; i88 <  (int32_t)32; i88++){
for (uint32_t i89 =  (int32_t)0; i89 <  (int32_t)256; i89++){
tmp304[i85][i89][i86][i87][i88] = tmp301[i85][i86][i87][i88][i89];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp301);

auto tmp306 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
ElemWiseMul5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp304, tmp37, tmp306,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp304);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp37);

auto tmp309 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
Conv3DCSF( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp299, tmp49,  (int32_t)24, tmp309);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp299);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp49);

auto tmp312 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i94;

int64_t i93;

int64_t i92;

int64_t i91;

int64_t i90;
for (uint32_t i90 =  (int32_t)0; i90 <  (int32_t)1; i90++){
for (uint32_t i91 =  (int32_t)0; i91 <  (int32_t)16; i91++){
for (uint32_t i92 =  (int32_t)0; i92 <  (int32_t)64; i92++){
for (uint32_t i93 =  (int32_t)0; i93 <  (int32_t)64; i93++){
for (uint32_t i94 =  (int32_t)0; i94 <  (int32_t)128; i94++){
tmp312[i90][i94][i91][i92][i93] = tmp309[i90][i91][i92][i93][i94];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp309);

auto tmp314 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
Conv3DCSF( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp257, tmp2,  (int32_t)24, tmp314);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp257);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp2);

auto tmp317 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i99;

int64_t i98;

int64_t i97;

int64_t i96;

int64_t i95;
for (uint32_t i95 =  (int32_t)0; i95 <  (int32_t)1; i95++){
for (uint32_t i96 =  (int32_t)0; i96 <  (int32_t)32; i96++){
for (uint32_t i97 =  (int32_t)0; i97 <  (int32_t)128; i97++){
for (uint32_t i98 =  (int32_t)0; i98 <  (int32_t)128; i98++){
for (uint32_t i99 =  (int32_t)0; i99 <  (int32_t)64; i99++){
tmp317[i95][i99][i96][i97][i98] = tmp314[i95][i96][i97][i98][i99];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp314);

auto tmp319 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp306, tmp74, tmp319);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp306);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp74);

auto tmp322 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
Relu5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp319, tmp322);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp319);

auto tmp324 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34);
Pad552( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp322,  (int32_t)5,  (int32_t)2, tmp107, tmp324);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp107);

auto tmp326 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);

int64_t i104;

int64_t i103;

int64_t i102;

int64_t i101;

int64_t i100;
for (uint32_t i100 =  (int32_t)0; i100 <  (int32_t)1; i100++){
for (uint32_t i101 =  (int32_t)0; i101 <  (int32_t)256; i101++){
for (uint32_t i102 =  (int32_t)0; i102 <  (int32_t)10; i102++){
for (uint32_t i103 =  (int32_t)0; i103 <  (int32_t)34; i103++){
for (uint32_t i104 =  (int32_t)0; i104 <  (int32_t)34; i104++){
tmp326[i100][i102][i103][i104][i101] = tmp324[i100][i101][i102][i103][i104];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34, tmp324);

auto tmp328 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
Conv3DCSF( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp326, tmp17,  (int32_t)24, tmp328);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp326);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp17);

auto tmp331 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i109;

int64_t i108;

int64_t i107;

int64_t i106;

int64_t i105;
for (uint32_t i105 =  (int32_t)0; i105 <  (int32_t)1; i105++){
for (uint32_t i106 =  (int32_t)0; i106 <  (int32_t)8; i106++){
for (uint32_t i107 =  (int32_t)0; i107 <  (int32_t)32; i107++){
for (uint32_t i108 =  (int32_t)0; i108 <  (int32_t)32; i108++){
for (uint32_t i109 =  (int32_t)0; i109 <  (int32_t)256; i109++){
tmp331[i105][i109][i106][i107][i108] = tmp328[i105][i106][i107][i108][i109];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp328);

auto tmp333 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
ElemWiseMul5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp331, tmp63, tmp333,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp63);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp331);

auto tmp336 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp333, tmp76, tmp336);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp333);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp76);

auto tmp339 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
Relu5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp336, tmp339);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp336);

auto tmp341 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp339, tmp322, tmp341);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp339);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp322);

auto tmp344 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34);
Pad552( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp341,  (int32_t)5,  (int32_t)2, tmp110, tmp344);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp110);

auto tmp346 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34);
Pad552( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp341,  (int32_t)5,  (int32_t)2, tmp123, tmp346);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp123);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp341);

auto tmp349 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);

int64_t i114;

int64_t i113;

int64_t i112;

int64_t i111;

int64_t i110;
for (uint32_t i110 =  (int32_t)0; i110 <  (int32_t)1; i110++){
for (uint32_t i111 =  (int32_t)0; i111 <  (int32_t)256; i111++){
for (uint32_t i112 =  (int32_t)0; i112 <  (int32_t)10; i112++){
for (uint32_t i113 =  (int32_t)0; i113 <  (int32_t)34; i113++){
for (uint32_t i114 =  (int32_t)0; i114 <  (int32_t)34; i114++){
tmp349[i110][i112][i113][i114][i111] = tmp344[i110][i111][i112][i113][i114];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34, tmp344);

auto tmp351 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);

int64_t i119;

int64_t i118;

int64_t i117;

int64_t i116;

int64_t i115;
for (uint32_t i115 =  (int32_t)0; i115 <  (int32_t)1; i115++){
for (uint32_t i116 =  (int32_t)0; i116 <  (int32_t)256; i116++){
for (uint32_t i117 =  (int32_t)0; i117 <  (int32_t)10; i117++){
for (uint32_t i118 =  (int32_t)0; i118 <  (int32_t)34; i118++){
for (uint32_t i119 =  (int32_t)0; i119 <  (int32_t)34; i119++){
tmp351[i115][i117][i118][i119][i116] = tmp346[i115][i116][i117][i118][i119];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34, tmp346);

auto tmp353 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
Conv3DCSF( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp351, tmp44,  (int32_t)24, tmp353);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp351);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp44);

auto tmp356 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i124;

int64_t i123;

int64_t i122;

int64_t i121;

int64_t i120;
for (uint32_t i120 =  (int32_t)0; i120 <  (int32_t)1; i120++){
for (uint32_t i121 =  (int32_t)0; i121 <  (int32_t)8; i121++){
for (uint32_t i122 =  (int32_t)0; i122 <  (int32_t)32; i122++){
for (uint32_t i123 =  (int32_t)0; i123 <  (int32_t)32; i123++){
for (uint32_t i124 =  (int32_t)0; i124 <  (int32_t)256; i124++){
tmp356[i120][i124][i121][i122][i123] = tmp353[i120][i121][i122][i123][i124];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp353);

auto tmp358 = make_vector<uint64_t>( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512);
Conv3DCSF( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp349, tmp77,  (int32_t)24, tmp358);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp349);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)512, tmp77);

auto tmp361 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);

int64_t i129;

int64_t i128;

int64_t i127;

int64_t i126;

int64_t i125;
for (uint32_t i125 =  (int32_t)0; i125 <  (int32_t)1; i125++){
for (uint32_t i126 =  (int32_t)0; i126 <  (int32_t)4; i126++){
for (uint32_t i127 =  (int32_t)0; i127 <  (int32_t)16; i127++){
for (uint32_t i128 =  (int32_t)0; i128 <  (int32_t)16; i128++){
for (uint32_t i129 =  (int32_t)0; i129 <  (int32_t)512; i129++){
tmp361[i125][i129][i126][i127][i128] = tmp358[i125][i126][i127][i128][i129];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512, tmp358);

auto tmp363 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
ElemWiseMul5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp361, tmp78, tmp363,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp78);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp361);

auto tmp366 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
MatAdd5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp363, tmp28, tmp366);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp28);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp363);

auto tmp369 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
Relu5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp366, tmp369);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp366);

auto tmp371 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)6,  (int32_t)18,  (int32_t)18);
Pad552( (int32_t)1,  (int32_t)512,  (int32_t)6,  (int32_t)18,  (int32_t)18,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp369,  (int32_t)5,  (int32_t)2, tmp113, tmp371);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp113);

auto tmp373 = make_vector<uint64_t>( (int32_t)1,  (int32_t)6,  (int32_t)18,  (int32_t)18,  (int32_t)512);

int64_t i134;

int64_t i133;

int64_t i132;

int64_t i131;

int64_t i130;
for (uint32_t i130 =  (int32_t)0; i130 <  (int32_t)1; i130++){
for (uint32_t i131 =  (int32_t)0; i131 <  (int32_t)512; i131++){
for (uint32_t i132 =  (int32_t)0; i132 <  (int32_t)6; i132++){
for (uint32_t i133 =  (int32_t)0; i133 <  (int32_t)18; i133++){
for (uint32_t i134 =  (int32_t)0; i134 <  (int32_t)18; i134++){
tmp373[i130][i132][i133][i134][i131] = tmp371[i130][i131][i132][i133][i134];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)6,  (int32_t)18,  (int32_t)18, tmp371);

auto tmp375 = make_vector<uint64_t>( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512);
Conv3DCSF( (int32_t)1,  (int32_t)6,  (int32_t)18,  (int32_t)18,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp373, tmp73,  (int32_t)24, tmp375);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp73);
ClearMemSecret5( (int32_t)1,  (int32_t)6,  (int32_t)18,  (int32_t)18,  (int32_t)512, tmp373);

auto tmp378 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);

int64_t i139;

int64_t i138;

int64_t i137;

int64_t i136;

int64_t i135;
for (uint32_t i135 =  (int32_t)0; i135 <  (int32_t)1; i135++){
for (uint32_t i136 =  (int32_t)0; i136 <  (int32_t)4; i136++){
for (uint32_t i137 =  (int32_t)0; i137 <  (int32_t)16; i137++){
for (uint32_t i138 =  (int32_t)0; i138 <  (int32_t)16; i138++){
for (uint32_t i139 =  (int32_t)0; i139 <  (int32_t)512; i139++){
tmp378[i135][i139][i136][i137][i138] = tmp375[i135][i136][i137][i138][i139];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512, tmp375);

auto tmp380 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
ElemWiseMul5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp378, tmp6, tmp380,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp378);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp6);

auto tmp383 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
MatAdd5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp380, tmp40, tmp383);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp40);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp380);

auto tmp386 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
Relu5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp383, tmp386);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp383);

auto tmp388 = make_vector<uint64_t>( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16);
MatAdd5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp386, tmp369, tmp388);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp386);
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp369);

auto tmp391 = make_vector<uint64_t>( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512);

int64_t i144;

int64_t i143;

int64_t i142;

int64_t i141;

int64_t i140;
for (uint32_t i140 =  (int32_t)0; i140 <  (int32_t)1; i140++){
for (uint32_t i141 =  (int32_t)0; i141 <  (int32_t)512; i141++){
for (uint32_t i142 =  (int32_t)0; i142 <  (int32_t)4; i142++){
for (uint32_t i143 =  (int32_t)0; i143 <  (int32_t)16; i143++){
for (uint32_t i144 =  (int32_t)0; i144 <  (int32_t)16; i144++){
tmp391[i140][i142][i143][i144][i141] = tmp388[i140][i141][i142][i143][i144];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)512,  (int32_t)4,  (int32_t)16,  (int32_t)16, tmp388);

auto tmp393 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);
ConvTranspose3DCSF( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512,  (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp391, tmp26,  (int32_t)24, tmp393);
ClearMemSecret5( (int32_t)1,  (int32_t)4,  (int32_t)16,  (int32_t)16,  (int32_t)512, tmp391);
ClearMemSecret5( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)256,  (int32_t)512, tmp26);

auto tmp396 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
CreateCopy5511( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256,  (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp393,  (int32_t)5, tmp117, tmp118, tmp396);
ClearMemPublic1( (int32_t)5, tmp118);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp393);
ClearMemPublic1( (int32_t)5, tmp117);

auto tmp400 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
MatAddBroadCast5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp396, tmp51, tmp400);
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp396);
ClearMemSecret1( (int32_t)256, tmp51);

auto tmp403 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i149;

int64_t i148;

int64_t i147;

int64_t i146;

int64_t i145;
for (uint32_t i145 =  (int32_t)0; i145 <  (int32_t)1; i145++){
for (uint32_t i146 =  (int32_t)0; i146 <  (int32_t)8; i146++){
for (uint32_t i147 =  (int32_t)0; i147 <  (int32_t)32; i147++){
for (uint32_t i148 =  (int32_t)0; i148 <  (int32_t)32; i148++){
for (uint32_t i149 =  (int32_t)0; i149 <  (int32_t)256; i149++){
tmp403[i145][i149][i146][i147][i148] = tmp400[i145][i146][i147][i148][i149];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp400);

auto tmp405 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
ElemWiseMul5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp403, tmp4, tmp405,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp4);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp403);

auto tmp408 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp405, tmp45, tmp408);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp45);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp405);

auto tmp411 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
Relu5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp408, tmp411);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp408);

auto tmp413 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34);
Pad552( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp411,  (int32_t)5,  (int32_t)2, tmp120, tmp413);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp120);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp411);

auto tmp416 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);

int64_t i154;

int64_t i153;

int64_t i152;

int64_t i151;

int64_t i150;
for (uint32_t i150 =  (int32_t)0; i150 <  (int32_t)1; i150++){
for (uint32_t i151 =  (int32_t)0; i151 <  (int32_t)256; i151++){
for (uint32_t i152 =  (int32_t)0; i152 <  (int32_t)10; i152++){
for (uint32_t i153 =  (int32_t)0; i153 <  (int32_t)34; i153++){
for (uint32_t i154 =  (int32_t)0; i154 <  (int32_t)34; i154++){
tmp416[i150][i152][i153][i154][i151] = tmp413[i150][i151][i152][i153][i154];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34, tmp413);

auto tmp418 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
Conv3DCSF( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp416, tmp11,  (int32_t)24, tmp418);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp416);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp11);

auto tmp421 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i159;

int64_t i158;

int64_t i157;

int64_t i156;

int64_t i155;
for (uint32_t i155 =  (int32_t)0; i155 <  (int32_t)1; i155++){
for (uint32_t i156 =  (int32_t)0; i156 <  (int32_t)8; i156++){
for (uint32_t i157 =  (int32_t)0; i157 <  (int32_t)32; i157++){
for (uint32_t i158 =  (int32_t)0; i158 <  (int32_t)32; i158++){
for (uint32_t i159 =  (int32_t)0; i159 <  (int32_t)256; i159++){
tmp421[i155][i159][i156][i157][i158] = tmp418[i155][i156][i157][i158][i159];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp418);

auto tmp423 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp421, tmp356, tmp423);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp421);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp356);

auto tmp426 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
ElemWiseMul5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp423, tmp53, tmp426,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp53);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp423);

auto tmp429 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp426, tmp33, tmp429);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp33);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp426);

auto tmp432 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
Relu5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp429, tmp432);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp429);

auto tmp434 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34);
Pad552( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp432,  (int32_t)5,  (int32_t)2, tmp126, tmp434);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp126);

auto tmp436 = make_vector<uint64_t>( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256);

int64_t i164;

int64_t i163;

int64_t i162;

int64_t i161;

int64_t i160;
for (uint32_t i160 =  (int32_t)0; i160 <  (int32_t)1; i160++){
for (uint32_t i161 =  (int32_t)0; i161 <  (int32_t)256; i161++){
for (uint32_t i162 =  (int32_t)0; i162 <  (int32_t)10; i162++){
for (uint32_t i163 =  (int32_t)0; i163 <  (int32_t)34; i163++){
for (uint32_t i164 =  (int32_t)0; i164 <  (int32_t)34; i164++){
tmp436[i160][i162][i163][i164][i161] = tmp434[i160][i161][i162][i163][i164];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)10,  (int32_t)34,  (int32_t)34, tmp434);

auto tmp438 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);
Conv3DCSF( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp436, tmp34,  (int32_t)24, tmp438);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp34);
ClearMemSecret5( (int32_t)1,  (int32_t)10,  (int32_t)34,  (int32_t)34,  (int32_t)256, tmp436);

auto tmp441 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);

int64_t i169;

int64_t i168;

int64_t i167;

int64_t i166;

int64_t i165;
for (uint32_t i165 =  (int32_t)0; i165 <  (int32_t)1; i165++){
for (uint32_t i166 =  (int32_t)0; i166 <  (int32_t)8; i166++){
for (uint32_t i167 =  (int32_t)0; i167 <  (int32_t)32; i167++){
for (uint32_t i168 =  (int32_t)0; i168 <  (int32_t)32; i168++){
for (uint32_t i169 =  (int32_t)0; i169 <  (int32_t)256; i169++){
tmp441[i165][i169][i166][i167][i168] = tmp438[i165][i166][i167][i168][i169];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp438);

auto tmp443 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
ElemWiseMul5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp441, tmp15, tmp443,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp15);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp441);

auto tmp446 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp443, tmp9, tmp446);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp443);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp9);

auto tmp449 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
Relu5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp446, tmp449);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp446);

auto tmp451 = make_vector<uint64_t>( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32);
MatAdd5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp449, tmp432, tmp451);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp449);
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp432);

auto tmp454 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256);

int64_t i174;

int64_t i173;

int64_t i172;

int64_t i171;

int64_t i170;
for (uint32_t i170 =  (int32_t)0; i170 <  (int32_t)1; i170++){
for (uint32_t i171 =  (int32_t)0; i171 <  (int32_t)256; i171++){
for (uint32_t i172 =  (int32_t)0; i172 <  (int32_t)8; i172++){
for (uint32_t i173 =  (int32_t)0; i173 <  (int32_t)32; i173++){
for (uint32_t i174 =  (int32_t)0; i174 <  (int32_t)32; i174++){
tmp454[i170][i172][i173][i174][i171] = tmp451[i170][i171][i172][i173][i174];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)256,  (int32_t)8,  (int32_t)32,  (int32_t)32, tmp451);

auto tmp456 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);
ConvTranspose3DCSF( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256,  (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp454, tmp56,  (int32_t)24, tmp456);
ClearMemSecret5( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)128,  (int32_t)256, tmp56);
ClearMemSecret5( (int32_t)1,  (int32_t)8,  (int32_t)32,  (int32_t)32,  (int32_t)256, tmp454);

auto tmp459 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
CreateCopy5511( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128,  (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp456,  (int32_t)5, tmp130, tmp131, tmp459);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp456);
ClearMemPublic1( (int32_t)5, tmp131);
ClearMemPublic1( (int32_t)5, tmp130);

auto tmp463 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
MatAddBroadCast5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp459, tmp19, tmp463);
ClearMemSecret1( (int32_t)128, tmp19);
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp459);

auto tmp466 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i179;

int64_t i178;

int64_t i177;

int64_t i176;

int64_t i175;
for (uint32_t i175 =  (int32_t)0; i175 <  (int32_t)1; i175++){
for (uint32_t i176 =  (int32_t)0; i176 <  (int32_t)16; i176++){
for (uint32_t i177 =  (int32_t)0; i177 <  (int32_t)64; i177++){
for (uint32_t i178 =  (int32_t)0; i178 <  (int32_t)64; i178++){
for (uint32_t i179 =  (int32_t)0; i179 <  (int32_t)128; i179++){
tmp466[i175][i179][i176][i177][i178] = tmp463[i175][i176][i177][i178][i179];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp463);

auto tmp468 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
ElemWiseMul5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp466, tmp65, tmp468,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp65);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp466);

auto tmp471 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp468, tmp66, tmp471);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp66);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp468);

auto tmp474 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
Relu5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp471, tmp474);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp471);

auto tmp476 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66);
Pad552( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp474,  (int32_t)5,  (int32_t)2, tmp133, tmp476);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp133);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp474);

auto tmp479 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);

int64_t i184;

int64_t i183;

int64_t i182;

int64_t i181;

int64_t i180;
for (uint32_t i180 =  (int32_t)0; i180 <  (int32_t)1; i180++){
for (uint32_t i181 =  (int32_t)0; i181 <  (int32_t)128; i181++){
for (uint32_t i182 =  (int32_t)0; i182 <  (int32_t)18; i182++){
for (uint32_t i183 =  (int32_t)0; i183 <  (int32_t)66; i183++){
for (uint32_t i184 =  (int32_t)0; i184 <  (int32_t)66; i184++){
tmp479[i180][i182][i183][i184][i181] = tmp476[i180][i181][i182][i183][i184];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66, tmp476);

auto tmp481 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
Conv3DCSF( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp479, tmp13,  (int32_t)24, tmp481);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp13);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp479);

auto tmp484 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i189;

int64_t i188;

int64_t i187;

int64_t i186;

int64_t i185;
for (uint32_t i185 =  (int32_t)0; i185 <  (int32_t)1; i185++){
for (uint32_t i186 =  (int32_t)0; i186 <  (int32_t)16; i186++){
for (uint32_t i187 =  (int32_t)0; i187 <  (int32_t)64; i187++){
for (uint32_t i188 =  (int32_t)0; i188 <  (int32_t)64; i188++){
for (uint32_t i189 =  (int32_t)0; i189 <  (int32_t)128; i189++){
tmp484[i185][i189][i186][i187][i188] = tmp481[i185][i186][i187][i188][i189];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp481);

auto tmp486 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp484, tmp312, tmp486);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp312);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp484);

auto tmp489 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
ElemWiseMul5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp486, tmp46, tmp489,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp46);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp486);

auto tmp492 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp489, tmp25, tmp492);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp25);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp489);

auto tmp495 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
Relu5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp492, tmp495);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp492);

auto tmp497 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66);
Pad552( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp495,  (int32_t)5,  (int32_t)2, tmp139, tmp497);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp139);

auto tmp499 = make_vector<uint64_t>( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128);

int64_t i194;

int64_t i193;

int64_t i192;

int64_t i191;

int64_t i190;
for (uint32_t i190 =  (int32_t)0; i190 <  (int32_t)1; i190++){
for (uint32_t i191 =  (int32_t)0; i191 <  (int32_t)128; i191++){
for (uint32_t i192 =  (int32_t)0; i192 <  (int32_t)18; i192++){
for (uint32_t i193 =  (int32_t)0; i193 <  (int32_t)66; i193++){
for (uint32_t i194 =  (int32_t)0; i194 <  (int32_t)66; i194++){
tmp499[i190][i192][i193][i194][i191] = tmp497[i190][i191][i192][i193][i194];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)18,  (int32_t)66,  (int32_t)66, tmp497);

auto tmp501 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);
Conv3DCSF( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp499, tmp48,  (int32_t)24, tmp501);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp48);
ClearMemSecret5( (int32_t)1,  (int32_t)18,  (int32_t)66,  (int32_t)66,  (int32_t)128, tmp499);

auto tmp504 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);

int64_t i199;

int64_t i198;

int64_t i197;

int64_t i196;

int64_t i195;
for (uint32_t i195 =  (int32_t)0; i195 <  (int32_t)1; i195++){
for (uint32_t i196 =  (int32_t)0; i196 <  (int32_t)16; i196++){
for (uint32_t i197 =  (int32_t)0; i197 <  (int32_t)64; i197++){
for (uint32_t i198 =  (int32_t)0; i198 <  (int32_t)64; i198++){
for (uint32_t i199 =  (int32_t)0; i199 <  (int32_t)128; i199++){
tmp504[i195][i199][i196][i197][i198] = tmp501[i195][i196][i197][i198][i199];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp501);

auto tmp506 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
ElemWiseMul5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp504, tmp54, tmp506,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp504);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp54);

auto tmp509 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp506, tmp72, tmp509);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp72);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp506);

auto tmp512 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
Relu5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp509, tmp512);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp509);

auto tmp514 = make_vector<uint64_t>( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64);
MatAdd5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp512, tmp495, tmp514);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp512);
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp495);

auto tmp517 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128);

int64_t i204;

int64_t i203;

int64_t i202;

int64_t i201;

int64_t i200;
for (uint32_t i200 =  (int32_t)0; i200 <  (int32_t)1; i200++){
for (uint32_t i201 =  (int32_t)0; i201 <  (int32_t)128; i201++){
for (uint32_t i202 =  (int32_t)0; i202 <  (int32_t)16; i202++){
for (uint32_t i203 =  (int32_t)0; i203 <  (int32_t)64; i203++){
for (uint32_t i204 =  (int32_t)0; i204 <  (int32_t)64; i204++){
tmp517[i200][i202][i203][i204][i201] = tmp514[i200][i201][i202][i203][i204];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)128,  (int32_t)16,  (int32_t)64,  (int32_t)64, tmp514);

auto tmp519 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);
ConvTranspose3DCSF( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128,  (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp517, tmp32,  (int32_t)24, tmp519);
ClearMemSecret5( (int32_t)1,  (int32_t)16,  (int32_t)64,  (int32_t)64,  (int32_t)128, tmp517);
ClearMemSecret5( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)64,  (int32_t)128, tmp32);

auto tmp522 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
CreateCopy5511( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64,  (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp519,  (int32_t)5, tmp143, tmp144, tmp522);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp519);
ClearMemPublic1( (int32_t)5, tmp144);
ClearMemPublic1( (int32_t)5, tmp143);

auto tmp526 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
MatAddBroadCast5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64,  (int32_t)64,  (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp522, tmp68, tmp526);
ClearMemSecret1( (int32_t)64, tmp68);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp522);

auto tmp529 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i209;

int64_t i208;

int64_t i207;

int64_t i206;

int64_t i205;
for (uint32_t i205 =  (int32_t)0; i205 <  (int32_t)1; i205++){
for (uint32_t i206 =  (int32_t)0; i206 <  (int32_t)32; i206++){
for (uint32_t i207 =  (int32_t)0; i207 <  (int32_t)128; i207++){
for (uint32_t i208 =  (int32_t)0; i208 <  (int32_t)128; i208++){
for (uint32_t i209 =  (int32_t)0; i209 <  (int32_t)64; i209++){
tmp529[i205][i209][i206][i207][i208] = tmp526[i205][i206][i207][i208][i209];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp526);

auto tmp531 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
ElemWiseMul5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp529, tmp79, tmp531,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp79);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp529);

auto tmp534 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp531, tmp29, tmp534);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp531);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp29);

auto tmp537 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
Relu5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp534, tmp537);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp534);

auto tmp539 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130);
Pad552( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp537,  (int32_t)5,  (int32_t)2, tmp146, tmp539);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp146);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp537);

auto tmp542 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);

int64_t i214;

int64_t i213;

int64_t i212;

int64_t i211;

int64_t i210;
for (uint32_t i210 =  (int32_t)0; i210 <  (int32_t)1; i210++){
for (uint32_t i211 =  (int32_t)0; i211 <  (int32_t)64; i211++){
for (uint32_t i212 =  (int32_t)0; i212 <  (int32_t)34; i212++){
for (uint32_t i213 =  (int32_t)0; i213 <  (int32_t)130; i213++){
for (uint32_t i214 =  (int32_t)0; i214 <  (int32_t)130; i214++){
tmp542[i210][i212][i213][i214][i211] = tmp539[i210][i211][i212][i213][i214];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130, tmp539);

auto tmp544 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
Conv3DCSF( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp542, tmp7,  (int32_t)24, tmp544);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp7);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp542);

auto tmp547 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i219;

int64_t i218;

int64_t i217;

int64_t i216;

int64_t i215;
for (uint32_t i215 =  (int32_t)0; i215 <  (int32_t)1; i215++){
for (uint32_t i216 =  (int32_t)0; i216 <  (int32_t)32; i216++){
for (uint32_t i217 =  (int32_t)0; i217 <  (int32_t)128; i217++){
for (uint32_t i218 =  (int32_t)0; i218 <  (int32_t)128; i218++){
for (uint32_t i219 =  (int32_t)0; i219 <  (int32_t)64; i219++){
tmp547[i215][i219][i216][i217][i218] = tmp544[i215][i216][i217][i218][i219];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp544);

auto tmp549 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp547, tmp317, tmp549);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp317);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp547);

auto tmp552 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
ElemWiseMul5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp549, tmp14, tmp552,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp14);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp549);

auto tmp555 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp552, tmp36, tmp555);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp552);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp36);

auto tmp558 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
Relu5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp555, tmp558);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp555);

auto tmp560 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130);
Pad552( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp558,  (int32_t)5,  (int32_t)2, tmp152, tmp560);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp152);

auto tmp562 = make_vector<uint64_t>( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64);

int64_t i224;

int64_t i223;

int64_t i222;

int64_t i221;

int64_t i220;
for (uint32_t i220 =  (int32_t)0; i220 <  (int32_t)1; i220++){
for (uint32_t i221 =  (int32_t)0; i221 <  (int32_t)64; i221++){
for (uint32_t i222 =  (int32_t)0; i222 <  (int32_t)34; i222++){
for (uint32_t i223 =  (int32_t)0; i223 <  (int32_t)130; i223++){
for (uint32_t i224 =  (int32_t)0; i224 <  (int32_t)130; i224++){
tmp562[i220][i222][i223][i224][i221] = tmp560[i220][i221][i222][i223][i224];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)34,  (int32_t)130,  (int32_t)130, tmp560);

auto tmp564 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);
Conv3DCSF( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp562, tmp67,  (int32_t)24, tmp564);
ClearMemSecret5( (int32_t)1,  (int32_t)34,  (int32_t)130,  (int32_t)130,  (int32_t)64, tmp562);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp67);

auto tmp567 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);

int64_t i229;

int64_t i228;

int64_t i227;

int64_t i226;

int64_t i225;
for (uint32_t i225 =  (int32_t)0; i225 <  (int32_t)1; i225++){
for (uint32_t i226 =  (int32_t)0; i226 <  (int32_t)32; i226++){
for (uint32_t i227 =  (int32_t)0; i227 <  (int32_t)128; i227++){
for (uint32_t i228 =  (int32_t)0; i228 <  (int32_t)128; i228++){
for (uint32_t i229 =  (int32_t)0; i229 <  (int32_t)64; i229++){
tmp567[i225][i229][i226][i227][i228] = tmp564[i225][i226][i227][i228][i229];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp564);

auto tmp569 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
ElemWiseMul5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp567, tmp24, tmp569,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp24);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp567);

auto tmp572 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp569, tmp75, tmp572);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp569);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp75);

auto tmp575 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
Relu5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp572, tmp575);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp572);

auto tmp577 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128);
MatAdd5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp575, tmp558, tmp577);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp558);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp575);

auto tmp580 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64);

int64_t i234;

int64_t i233;

int64_t i232;

int64_t i231;

int64_t i230;
for (uint32_t i230 =  (int32_t)0; i230 <  (int32_t)1; i230++){
for (uint32_t i231 =  (int32_t)0; i231 <  (int32_t)64; i231++){
for (uint32_t i232 =  (int32_t)0; i232 <  (int32_t)32; i232++){
for (uint32_t i233 =  (int32_t)0; i233 <  (int32_t)128; i233++){
for (uint32_t i234 =  (int32_t)0; i234 <  (int32_t)128; i234++){
tmp580[i230][i232][i233][i234][i231] = tmp577[i230][i231][i232][i233][i234];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)32,  (int32_t)128,  (int32_t)128, tmp577);

auto tmp582 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);
ConvTranspose3DCSF( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64,  (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)2,  (int32_t)2,  (int32_t)2, tmp580, tmp47,  (int32_t)24, tmp582);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)128,  (int32_t)128,  (int32_t)64, tmp580);
ClearMemSecret5( (int32_t)4,  (int32_t)4,  (int32_t)4,  (int32_t)32,  (int32_t)64, tmp47);

auto tmp585 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
CreateCopy5511( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32,  (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp582,  (int32_t)5, tmp156, tmp157, tmp585);
ClearMemPublic1( (int32_t)5, tmp156);
ClearMemPublic1( (int32_t)5, tmp157);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp582);

auto tmp589 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
MatAddBroadCast5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32,  (int32_t)32,  (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp585, tmp10, tmp589);
ClearMemSecret1( (int32_t)32, tmp10);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp585);

auto tmp592 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i239;

int64_t i238;

int64_t i237;

int64_t i236;

int64_t i235;
for (uint32_t i235 =  (int32_t)0; i235 <  (int32_t)1; i235++){
for (uint32_t i236 =  (int32_t)0; i236 <  (int32_t)64; i236++){
for (uint32_t i237 =  (int32_t)0; i237 <  (int32_t)256; i237++){
for (uint32_t i238 =  (int32_t)0; i238 <  (int32_t)256; i238++){
for (uint32_t i239 =  (int32_t)0; i239 <  (int32_t)32; i239++){
tmp592[i235][i239][i236][i237][i238] = tmp589[i235][i236][i237][i238][i239];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp589);

auto tmp594 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
ElemWiseMul5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp592, tmp30, tmp594,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp592);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp30);

auto tmp597 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp594, tmp12, tmp597);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp594);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp12);

auto tmp600 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
Relu5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp597, tmp600);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp597);

auto tmp602 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp600,  (int32_t)5,  (int32_t)2, tmp159, tmp602);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp159);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp600);

auto tmp605 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);

int64_t i244;

int64_t i243;

int64_t i242;

int64_t i241;

int64_t i240;
for (uint32_t i240 =  (int32_t)0; i240 <  (int32_t)1; i240++){
for (uint32_t i241 =  (int32_t)0; i241 <  (int32_t)32; i241++){
for (uint32_t i242 =  (int32_t)0; i242 <  (int32_t)66; i242++){
for (uint32_t i243 =  (int32_t)0; i243 <  (int32_t)258; i243++){
for (uint32_t i244 =  (int32_t)0; i244 <  (int32_t)258; i244++){
tmp605[i240][i242][i243][i244][i241] = tmp602[i240][i241][i242][i243][i244];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp602);

auto tmp607 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp605, tmp18,  (int32_t)24, tmp607);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp605);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32, tmp18);

auto tmp610 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i249;

int64_t i248;

int64_t i247;

int64_t i246;

int64_t i245;
for (uint32_t i245 =  (int32_t)0; i245 <  (int32_t)1; i245++){
for (uint32_t i246 =  (int32_t)0; i246 <  (int32_t)64; i246++){
for (uint32_t i247 =  (int32_t)0; i247 <  (int32_t)256; i247++){
for (uint32_t i248 =  (int32_t)0; i248 <  (int32_t)256; i248++){
for (uint32_t i249 =  (int32_t)0; i249 <  (int32_t)32; i249++){
tmp610[i245][i249][i246][i247][i248] = tmp607[i245][i246][i247][i248][i249];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp607);

auto tmp612 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp610, tmp240, tmp612);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp610);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp240);

auto tmp615 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
ElemWiseMul5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp612, tmp5, tmp615,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp612);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp5);

auto tmp618 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp615, tmp58, tmp618);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp615);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp58);

auto tmp621 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
Relu5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp618, tmp621);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp618);

auto tmp623 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258);
Pad552( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp621,  (int32_t)5,  (int32_t)2, tmp165, tmp623);
ClearMemPublic2( (int32_t)5,  (int32_t)2, tmp165);

auto tmp625 = make_vector<uint64_t>( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32);

int64_t i254;

int64_t i253;

int64_t i252;

int64_t i251;

int64_t i250;
for (uint32_t i250 =  (int32_t)0; i250 <  (int32_t)1; i250++){
for (uint32_t i251 =  (int32_t)0; i251 <  (int32_t)32; i251++){
for (uint32_t i252 =  (int32_t)0; i252 <  (int32_t)66; i252++){
for (uint32_t i253 =  (int32_t)0; i253 <  (int32_t)258; i253++){
for (uint32_t i254 =  (int32_t)0; i254 <  (int32_t)258; i254++){
tmp625[i250][i252][i253][i254][i251] = tmp623[i250][i251][i252][i253][i254];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)66,  (int32_t)258,  (int32_t)258, tmp623);

auto tmp627 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);
Conv3DCSF( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp625, tmp64,  (int32_t)24, tmp627);
ClearMemSecret5( (int32_t)1,  (int32_t)66,  (int32_t)258,  (int32_t)258,  (int32_t)32, tmp625);
ClearMemSecret5( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)32, tmp64);

auto tmp630 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i259;

int64_t i258;

int64_t i257;

int64_t i256;

int64_t i255;
for (uint32_t i255 =  (int32_t)0; i255 <  (int32_t)1; i255++){
for (uint32_t i256 =  (int32_t)0; i256 <  (int32_t)64; i256++){
for (uint32_t i257 =  (int32_t)0; i257 <  (int32_t)256; i257++){
for (uint32_t i258 =  (int32_t)0; i258 <  (int32_t)256; i258++){
for (uint32_t i259 =  (int32_t)0; i259 <  (int32_t)32; i259++){
tmp630[i255][i259][i256][i257][i258] = tmp627[i255][i256][i257][i258][i259];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp627);

auto tmp632 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
ElemWiseMul5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp630, tmp57, tmp632,  (int64_t)24);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp57);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp630);

auto tmp635 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp632, tmp69, tmp635);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp69);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp632);

auto tmp638 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
Relu5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp635, tmp638);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp635);

auto tmp640 = make_vector<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256);
MatAdd5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp638, tmp621, tmp640);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp638);
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp621);

auto tmp643 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32);

int64_t i264;

int64_t i263;

int64_t i262;

int64_t i261;

int64_t i260;
for (uint32_t i260 =  (int32_t)0; i260 <  (int32_t)1; i260++){
for (uint32_t i261 =  (int32_t)0; i261 <  (int32_t)32; i261++){
for (uint32_t i262 =  (int32_t)0; i262 <  (int32_t)64; i262++){
for (uint32_t i263 =  (int32_t)0; i263 <  (int32_t)256; i263++){
for (uint32_t i264 =  (int32_t)0; i264 <  (int32_t)256; i264++){
tmp643[i260][i262][i263][i264][i261] = tmp640[i260][i261][i262][i263][i264];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)32,  (int32_t)64,  (int32_t)256,  (int32_t)256, tmp640);

auto tmp645 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8);
Conv3DCSF( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)8,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp643, tmp62,  (int32_t)24, tmp645);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)32, tmp643);
ClearMemSecret5( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)8, tmp62);

auto tmp648 = make_vector<uint64_t>( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8);
MatAddBroadCast5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8,  (int32_t)8,  (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8, tmp645, tmp3, tmp648);
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8, tmp645);
ClearMemSecret1( (int32_t)8, tmp3);

auto tmp651 = make_vector<uint64_t>( (int32_t)1,  (int32_t)8,  (int32_t)64,  (int32_t)256,  (int32_t)256);

int64_t i269;

int64_t i268;

int64_t i267;

int64_t i266;

int64_t i265;
for (uint32_t i265 =  (int32_t)0; i265 <  (int32_t)1; i265++){
for (uint32_t i266 =  (int32_t)0; i266 <  (int32_t)64; i266++){
for (uint32_t i267 =  (int32_t)0; i267 <  (int32_t)256; i267++){
for (uint32_t i268 =  (int32_t)0; i268 <  (int32_t)256; i268++){
for (uint32_t i269 =  (int32_t)0; i269 <  (int32_t)8; i269++){
tmp651[i265][i269][i266][i267][i268] = tmp648[i265][i266][i267][i268][i269];
}
}
}
}
}
ClearMemSecret5( (int32_t)1,  (int32_t)64,  (int32_t)256,  (int32_t)256,  (int32_t)8, tmp648);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)8; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
for (uint32_t i4 =  (uint32_t)0; i4 <  (int32_t)256; i4++){
cout << (funcReconstruct2PCCons(tmp651[i0][i1][i2][i3][i4], 2)) << endl;
}
}
}
}
}
cout << "----------------------------------" << endl;
cout << NUM_OF_PARTIES << "PC code, P" << partyNum << endl;
cout << NUM_ITERATIONS << " iterations, " << whichNetwork << endl;
cout << "----------------------------------" << endl << endl;


/****************************** CLEAN-UP ******************************/
delete aes_common;
delete aes_indep;
delete aes_a_1;
delete aes_a_2;
delete aes_b_1;
delete aes_b_2;
delete aes_c_1;
delete aes_share_conv_bit_shares_p0_p2;
delete aes_share_conv_bit_shares_p1_p2;
delete aes_share_conv_shares_mod_odd_p0_p2;
delete aes_share_conv_shares_mod_odd_p1_p2;
delete aes_comp_msb_shares_lsb_p0_p2;
delete aes_comp_msb_shares_lsb_p1_p2;
delete aes_comp_msb_shares_bit_vec_p0_p2;
delete aes_comp_msb_shares_bit_vec_p1_p2;
delete aes_conv_opti_a_1;
delete aes_conv_opti_a_2;
delete aes_conv_opti_b_1;
delete aes_conv_opti_b_2;
delete aes_conv_opti_c_1;
delete aes_parallel;
deleteObjects();

return 0;

}
//#endif
